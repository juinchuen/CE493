
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
Reading SCL library '/home/jco1147/393_folder/openlane/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib' as a blackboxâ¦

1. Executing Liberty frontend: /home/jco1147/393_folder/openlane/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: svm.sv
Parsing SystemVerilog input from `svm.sv' to AST representation.
Generating RTLIL representation for module `\svm'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/home/jco1147/393_folder/CE493/sv/svm/runs/RUN_2023-11-29_17-14-46/05-yosys-synthesis/hierarchy.dot'.
Dumping module svm to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \svm

4.2. Analyzing design hierarchy..
Top module:  \svm
Removed 0 unused modules.
Renaming module svm to svm.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \svm

5.2. Analyzing design hierarchy..
Top module:  \svm
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$svm.sv:46$11 in module svm.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 0 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rstb in `\svm.$proc$svm.sv:46$11'.

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\svm.$proc$svm.sv:46$11'.
     1/3: $0\rising[0:0]
     2/3: $0\delta[15:0]
     3/3: $0\counter[15:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\svm.\counter' using process `\svm.$proc$svm.sv:46$11'.
  created $adff cell `$procdff$36' with negative edge clock and negative level reset.
Creating register for signal `\svm.\delta' using process `\svm.$proc$svm.sv:46$11'.
  created $adff cell `$procdff$37' with negative edge clock and negative level reset.
Creating register for signal `\svm.\rising' using process `\svm.$proc$svm.sv:46$11'.
  created $adff cell `$procdff$38' with negative edge clock and negative level reset.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `svm.$proc$svm.sv:46$11'.
Cleaned up 0 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module svm...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.
<suppressed ~1 debug messages>

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 1 unused cells and 17 unused wires.
<suppressed ~6 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$svm.sv:62$31: \rising -> 1'1
      Replacing known input bits on port A of cell $ternary$svm.sv:64$34: \rising -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$37 ($adff) from module svm (D = $0\delta[15:0], Q = \delta).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.
<suppressed ~1 debug messages>

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 16) from port A of cell svm.$sub$svm.sv:29$4 ($sub).
Removed top 1 bits (of 16) from port A of cell svm.$sub$svm.sv:30$5 ($sub).
Removed top 1 bits (of 16) from port A of cell svm.$sub$svm.sv:31$6 ($sub).
Removed top 31 bits (of 32) from port B of cell svm.$sub$svm.sv:58$14 ($sub).
Removed top 15 bits (of 32) from port Y of cell svm.$sub$svm.sv:58$14 ($sub).
Removed top 16 bits (of 32) from port A of cell svm.$not$svm.sv:58$17 ($not).
Removed top 31 bits (of 32) from port B of cell svm.$add$svm.sv:58$18 ($add).
Removed top 15 bits (of 16) from port B of cell svm.$eq$svm.sv:60$21 ($eq).
Removed top 16 bits (of 32) from mux cell svm.$ternary$svm.sv:58$27 ($mux).
Removed top 1 bits (of 2) from port B of cell svm.$auto$opt_dff.cc:195:make_patterns_logic$43 ($ne).
Removed top 16 bits (of 32) from mux cell svm.$ternary$svm.sv:58$20 ($mux).
Removed top 16 bits (of 32) from mux cell svm.$ternary$svm.sv:60$26 ($mux).
Removed top 16 bits (of 32) from port Y of cell svm.$add$svm.sv:58$18 ($add).
Removed top 16 bits (of 32) from port A of cell svm.$add$svm.sv:58$18 ($add).
Removed top 16 bits (of 32) from port Y of cell svm.$not$svm.sv:58$17 ($not).
Removed top 16 bits (of 32) from wire svm.$add$svm.sv:58$18_Y.
Removed top 16 bits (of 32) from wire svm.$not$svm.sv:58$17_Y.

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module svm:
  creating $macc model for $add$svm.sv:56$13 ($add).
  creating $macc model for $add$svm.sv:58$18 ($add).
  creating $macc model for $mul$svm.sv:34$7 ($mul).
  creating $macc model for $mul$svm.sv:35$8 ($mul).
  creating $macc model for $mul$svm.sv:36$9 ($mul).
  creating $macc model for $sub$svm.sv:29$4 ($sub).
  creating $macc model for $sub$svm.sv:30$5 ($sub).
  creating $macc model for $sub$svm.sv:31$6 ($sub).
  creating $macc model for $sub$svm.sv:58$14 ($sub).
  creating $alu model for $macc $sub$svm.sv:58$14.
  creating $alu model for $macc $sub$svm.sv:31$6.
  creating $alu model for $macc $sub$svm.sv:30$5.
  creating $alu model for $macc $sub$svm.sv:29$4.
  creating $alu model for $macc $add$svm.sv:58$18.
  creating $alu model for $macc $add$svm.sv:56$13.
  creating $macc cell for $mul$svm.sv:34$7: $auto$alumacc.cc:365:replace_macc$48
  creating $macc cell for $mul$svm.sv:36$9: $auto$alumacc.cc:365:replace_macc$49
  creating $macc cell for $mul$svm.sv:35$8: $auto$alumacc.cc:365:replace_macc$50
  creating $alu model for $ge$svm.sv:24$1 ($ge): new $alu
  creating $alu model for $ge$svm.sv:25$2 ($ge): new $alu
  creating $alu model for $ge$svm.sv:26$3 ($ge): new $alu
  creating $alu cell for $ge$svm.sv:26$3: $auto$alumacc.cc:485:replace_alu$54
  creating $alu cell for $ge$svm.sv:25$2: $auto$alumacc.cc:485:replace_alu$63
  creating $alu cell for $ge$svm.sv:24$1: $auto$alumacc.cc:485:replace_alu$72
  creating $alu cell for $add$svm.sv:56$13: $auto$alumacc.cc:485:replace_alu$81
  creating $alu cell for $add$svm.sv:58$18: $auto$alumacc.cc:485:replace_alu$84
  creating $alu cell for $sub$svm.sv:29$4: $auto$alumacc.cc:485:replace_alu$87
  creating $alu cell for $sub$svm.sv:30$5: $auto$alumacc.cc:485:replace_alu$90
  creating $alu cell for $sub$svm.sv:31$6: $auto$alumacc.cc:485:replace_alu$93
  creating $alu cell for $sub$svm.sv:58$14: $auto$alumacc.cc:485:replace_alu$96
  created 9 $alu and 3 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

30.9. Rerunning OPT passes. (Maybe there is more to do..)

30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

30.13. Executing OPT_DFF pass (perform DFF optimizations).

30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

30.16. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.
<suppressed ~8 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 48 unused wires.
<suppressed ~1 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

35.10. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /home/ece393/oss-cad-suite-20231016/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/ece393/oss-cad-suite-20231016/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$adbaf76fa5a3091a329503792521395f8ff4d1a4\_90_alu for cells of type $alu.
Using template $paramod$d588c4475f18bc347201f0f2671d73b8c1e7b7ea\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper maccmap for cells of type $macc.
  add \periodTop * \diffC (16x16 bits, unsigned)
Using extmapper simplemap for cells of type $reduce_and.
  add \periodTop * \diffB (16x16 bits, unsigned)
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$2af30114e9bd4ccb04dad757b3f0a8f6bf0615b0\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
  add \periodTop * \diffA (16x16 bits, unsigned)
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000100000 for cells of type $fa.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
No more expansions possible.
<suppressed ~1968 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.
<suppressed ~4739 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
<suppressed ~282 debug messages>
Removed a total of 94 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 349 unused cells and 1007 unused wires.
<suppressed ~350 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\svm' to `<abc-temp-dir>/input.blif'..
Extracted 5120 gates and 5218 wires to a netlist network with 97 inputs and 37 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:      452
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               NOT cells:       93
ABC RESULTS:               AND cells:      210
ABC RESULTS:                OR cells:      388
ABC RESULTS:              XNOR cells:      446
ABC RESULTS:              NAND cells:      108
ABC RESULTS:               NOR cells:      216
ABC RESULTS:            ANDNOT cells:     2038
ABC RESULTS:               XOR cells:     1137
ABC RESULTS:        internal signals:     5084
ABC RESULTS:           input signals:       97
ABC RESULTS:          output signals:       37
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $auto$ff.cc:266:slice$690 ($_DFFE_NN1P_) from module svm (removing D path).
Setting constant 1-bit at position 0 on $auto$ff.cc:266:slice$690 ($_DLATCH_N_) from module svm.

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 847 unused wires.
<suppressed ~7 debug messages>

39.5. Rerunning OPT passes. (Removed registers in this run.)

39.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.
<suppressed ~3 debug messages>

39.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

39.8. Executing OPT_DFF pass (perform DFF optimizations).

39.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

39.10. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \svm

40.2. Analyzing design hierarchy..
Top module:  \svm
Removed 0 unused modules.

41. Printing statistics.

=== svm ===

   Number of wires:               5067
   Number of wire bits:           5247
   Number of public wires:          16
   Number of public wire bits:     151
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5115
     $_ANDNOT_                    2038
     $_AND_                        209
     $_DFFE_NN0P_                   15
     $_DFF_NN0_                     16
     $_DFF_NN1_                      1
     $_MUX_                          2
     $_NAND_                       108
     $_NOR_                        216
     $_NOT_                         94
     $_ORNOT_                      452
     $_OR_                         383
     $_XNOR_                       446
     $_XOR_                       1135

42. Executing CHECK pass (checking for obvious problems).
Checking module svm...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/home/jco1147/393_folder/CE493/sv/svm/runs/RUN_2023-11-29_17-14-46/05-yosys-synthesis/post_techmap.dot'.
Dumping module svm to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 3 unused wires.
<suppressed ~3 debug messages>
{
   "creator": "Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\svm": {
         "num_wires":         5064,
         "num_wire_bits":     5199,
         "num_pub_wires":     13,
         "num_pub_wire_bits": 103,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         5115,
         "num_cells_by_type": {
            "$_ANDNOT_": 2038,
            "$_AND_": 209,
            "$_DFFE_NN0P_": 15,
            "$_DFF_NN0_": 16,
            "$_DFF_NN1_": 1,
            "$_MUX_": 2,
            "$_NAND_": 108,
            "$_NOR_": 216,
            "$_NOT_": 94,
            "$_ORNOT_": 452,
            "$_OR_": 383,
            "$_XNOR_": 446,
            "$_XOR_": 1135
         }
      }
   },
      "design": {
         "num_wires":         5064,
         "num_wire_bits":     5199,
         "num_pub_wires":     13,
         "num_pub_wire_bits": 103,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         5115,
         "num_cells_by_type": {
            "$_ANDNOT_": 2038,
            "$_AND_": 209,
            "$_DFFE_NN0P_": 15,
            "$_DFF_NN0_": 16,
            "$_DFF_NN1_": 1,
            "$_MUX_": 2,
            "$_NAND_": 108,
            "$_NOR_": 216,
            "$_NOT_": 94,
            "$_ORNOT_": 452,
            "$_OR_": 383,
            "$_XNOR_": 446,
            "$_XOR_": 1135
         }
      }
}

[INFO] Applying latch mapping from '/home/jco1147/393_folder/openlane/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â¦

47. Executing TECHMAP pass (map to technology primitives).

47.1. Executing Verilog-2005 frontend: /home/jco1147/393_folder/openlane/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/jco1147/393_folder/openlane/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

47.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

48. Executing SIMPLEMAP pass (map simple cells to gate primitives).

49. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

49.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\svm':
  mapped 31 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 1 $_DFF_PN1_ cells to \sky130_fd_sc_hd__dfstp_2 cells.
{
   "creator": "Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\svm": {
         "num_wires":         5111,
         "num_wire_bits":     5246,
         "num_pub_wires":     13,
         "num_pub_wire_bits": 103,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         5162,
         "num_cells_by_type": {
            "$_ANDNOT_": 2038,
            "$_AND_": 209,
            "$_MUX_": 17,
            "$_NAND_": 108,
            "$_NOR_": 216,
            "$_NOT_": 126,
            "$_ORNOT_": 452,
            "$_OR_": 383,
            "$_XNOR_": 446,
            "$_XOR_": 1135,
            "sky130_fd_sc_hd__dfrtp_2": 31,
            "sky130_fd_sc_hd__dfstp_2": 1
         }
      }
   },
      "design": {
         "num_wires":         5111,
         "num_wire_bits":     5246,
         "num_pub_wires":     13,
         "num_pub_wire_bits": 103,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         5162,
         "num_cells_by_type": {
            "$_ANDNOT_": 2038,
            "$_AND_": 209,
            "$_MUX_": 17,
            "$_NAND_": 108,
            "$_NOR_": 216,
            "$_NOT_": 126,
            "$_ORNOT_": 452,
            "$_OR_": 383,
            "$_XNOR_": 446,
            "$_XOR_": 1135,
            "sky130_fd_sc_hd__dfrtp_2": 31,
            "sky130_fd_sc_hd__dfstp_2": 1
         }
      }
}

[INFO] USING STRATEGY AREA 0

50. Executing ABC pass (technology mapping using ABC).

50.1. Extracting gate netlist of module `\svm' to `/tmp/yosys-abc-u4wbm4/input.blif'..
Extracted 5130 gates and 5228 wires to a netlist network with 97 inputs and 68 outputs.

50.1.1. Executing ABC.
Running ABC command: "/home/ece393/oss-cad-suite-20231016/lib/yosys-abc" -s -f /tmp/yosys-abc-u4wbm4/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-u4wbm4/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-u4wbm4/input.blif 
ABC: + read_lib -w /home/jco1147/393_folder/CE493/sv/svm/runs/RUN_2023-11-29_17-14-46/tmp/f38c7f22a4674676b14bebf7a88f479b.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/jco1147/393_folder/CE493/sv/svm/runs/RUN_2023-11-29_17-14-46/tmp/f38c7f22a4674676b14bebf7a88f479b.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.06 sec
ABC: Memory =    9.54 MB. Time =     0.06 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/jco1147/393_folder/CE493/sv/svm/runs/RUN_2023-11-29_17-14-46/05-yosys-synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /home/jco1147/393_folder/CE493/sv/svm/runs/RUN_2023-11-29_17-14-46/05-yosys-synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + upsize -D 10000 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: Current delay (6986.32 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + stime -p 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =   4210 (  3.4 %)   Cap = 10.2 ff (  0.6 %)   Area =    42054.08 ( 96.4 %)   Delay =  7012.23 ps  (  5.7 %)               
ABC: Path  0 --      16 : 0   24 pi                        A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =  45.8 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     496 : 4    2 sky130_fd_sc_hd__or4bb_2  A =  12.51  Df = 638.8 -463.1 ps  S = 111.0 ps  Cin =  1.5 ff  Cout =   7.0 ff  Cmax = 312.2 ff  G =  456  
ABC: Path  2 --     569 : 3    1 sky130_fd_sc_hd__o21a_2   A =   8.76  Df = 794.7 -440.6 ps  S =  59.5 ps  Cin =  2.4 ff  Cout =   8.4 ff  Cmax = 294.8 ff  G =  346  
ABC: Path  3 --     570 : 2    2 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df = 965.1 -463.2 ps  S = 183.8 ps  Cin =  8.5 ff  Cout =  10.0 ff  Cmax = 121.8 ff  G =  113  
ABC: Path  4 --     571 : 2    2 sky130_fd_sc_hd__xor2_2   A =  16.27  Df =1213.3 -414.6 ps  S = 211.3 ps  Cin =  8.6 ff  Cout =  13.6 ff  Cmax = 130.0 ff  G =  153  
ABC: Path  5 --     651 : 2    2 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =1440.1 -407.7 ps  S = 220.7 ps  Cin =  8.5 ff  Cout =  13.2 ff  Cmax = 121.8 ff  G =  148  
ABC: Path  6 --     652 : 2    2 sky130_fd_sc_hd__xor2_2   A =  16.27  Df =1618.8 -130.4 ps  S = 213.1 ps  Cin =  8.6 ff  Cout =  13.6 ff  Cmax = 130.0 ff  G =  153  
ABC: Path  7 --     656 : 3    2 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =1831.2 -168.1 ps  S = 199.0 ps  Cin =  4.6 ff  Cout =  14.0 ff  Cmax = 128.2 ff  G =  293  
ABC: Path  8 --     658 : 2    2 sky130_fd_sc_hd__xor2_2   A =  16.27  Df =2095.2 -230.9 ps  S = 190.0 ps  Cin =  8.6 ff  Cout =  11.5 ff  Cmax = 130.0 ff  G =  128  
ABC: Path  9 --     661 : 3    2 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =2271.8 -180.7 ps  S =  63.9 ps  Cin =  2.4 ff  Cout =   9.9 ff  Cmax = 309.5 ff  G =  411  
ABC: Path 10 --     663 : 2    1 sky130_fd_sc_hd__or2b_2   A =   8.76  Df =2551.4 -311.1 ps  S =  47.0 ps  Cin =  1.6 ff  Cout =   1.6 ff  Cmax = 312.2 ff  G =   98  
ABC: Path 11 --     664 : 3    2 sky130_fd_sc_hd__a21boi_2 A =  11.26  Df =2724.4  -71.5 ps  S = 189.4 ps  Cin =  3.6 ff  Cout =  13.2 ff  Cmax = 129.1 ff  G =  350  
ABC: Path 12 --     665 : 2    2 sky130_fd_sc_hd__xor2_2   A =  16.27  Df =2903.0   -1.2 ps  S = 212.3 ps  Cin =  8.6 ff  Cout =  13.5 ff  Cmax = 130.0 ff  G =  152  
ABC: Path 13 --     667 : 3    4 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =3148.7 -121.9 ps  S = 232.5 ps  Cin =  4.6 ff  Cout =  17.1 ff  Cmax = 128.2 ff  G =  359  
ABC: Path 14 --    1355 : 2    2 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =3344.1  -32.8 ps  S = 114.2 ps  Cin =  8.5 ff  Cout =   4.0 ff  Cmax = 121.8 ff  G =   44  
ABC: Path 15 --    1357 : 4    1 sky130_fd_sc_hd__or4_2    A =   8.76  Df =4012.0 -471.7 ps  S = 106.3 ps  Cin =  1.5 ff  Cout =   4.7 ff  Cmax = 310.4 ff  G =  291  
ABC: Path 16 --    1361 : 4    4 sky130_fd_sc_hd__o211ai_2 A =  12.51  Df =4294.3 -609.8 ps  S = 294.5 ps  Cin =  4.4 ff  Cout =  20.2 ff  Cmax = 133.7 ff  G =  445  
ABC: Path 17 --    1518 : 4    2 sky130_fd_sc_hd__nand4_2  A =  12.51  Df =4428.3 -614.7 ps  S =  84.8 ps  Cin =  4.4 ff  Cout =   3.9 ff  Cmax = 200.5 ff  G =   87  
ABC: Path 18 --    1575 : 4    2 sky130_fd_sc_hd__a211o_2  A =  10.01  Df =4745.9 -794.6 ps  S =  59.6 ps  Cin =  2.4 ff  Cout =   7.0 ff  Cmax = 325.0 ff  G =  288  
ABC: Path 19 --    1580 : 3    3 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =4953.0 -867.5 ps  S =  61.6 ps  Cin =  2.4 ff  Cout =   9.6 ff  Cmax = 309.5 ff  G =  388  
ABC: Path 20 --    1588 : 5    1 sky130_fd_sc_hd__a311o_2  A =  11.26  Df =5318.7-1078.8 ps  S =  47.9 ps  Cin =  2.3 ff  Cout =   1.5 ff  Cmax = 298.5 ff  G =   63  
ABC: Path 21 --    1590 : 2    2 sky130_fd_sc_hd__and2_2   A =   7.51  Df =5485.7-1120.4 ps  S =  43.7 ps  Cin =  1.5 ff  Cout =   4.1 ff  Cmax = 303.0 ff  G =  261  
ABC: Path 22 --    1591 : 2    2 sky130_fd_sc_hd__and2_2   A =   7.51  Df =5669.6-1170.6 ps  S =  43.9 ps  Cin =  1.5 ff  Cout =   4.1 ff  Cmax = 303.0 ff  G =  265  
ABC: Path 23 --    1619 : 5    1 sky130_fd_sc_hd__o221a_2  A =  11.26  Df =6752.4 -656.8 ps  S =  41.4 ps  Cin =  2.3 ff  Cout =   2.6 ff  Cmax = 281.1 ff  G =  101  
ABC: Path 24 --    1620 : 3    1 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =7012.2 -121.6 ps  S = 173.5 ps  Cin =  2.4 ff  Cout =  33.4 ff  Cmax = 309.5 ff  G = 1422  
ABC: Start-point = pi15 (\vB [1]).  End-point = po16 (\pwmB).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   97/   68  lat =    0  nd =  4210  edge =  10281  area =42064.41  delay =29.00  lev = 29
ABC: + write_blif /tmp/yosys-abc-u4wbm4/output.blif 

50.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       40
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a32oi_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:       90
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       34
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:       26
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       58
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:       52
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       35
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:       28
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       50
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:       26
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       26
ABC RESULTS:   sky130_fd_sc_hd__o32ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:      106
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:      310
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:      119
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:      154
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       65
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:      455
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       76
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:      300
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:      146
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:      348
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      434
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:      110
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       84
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:      689
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:      101
ABC RESULTS:        internal signals:     5063
ABC RESULTS:           input signals:       97
ABC RESULTS:          output signals:       68
Removing temp directory.

51. Executing SETUNDEF pass (replace undef values with defined constants).

52. Executing HILOMAP pass (mapping to constant drivers).
Warning: Selection "sky130_fd_sc_hd__conb_1" did not match any module.
Warning: Selection "LO" did not match any object.

53. Executing SPLITNETS pass (splitting up multi-bit signals).

54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 5245 unused wires.
<suppressed ~2 debug messages>

55. Executing INSBUF pass (insert buffer cells for connected wires).

56. Executing CHECK pass (checking for obvious problems).
Checking module svm...
Found and reported 0 problems.
{
   "creator": "Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\svm": {
         "num_wires":         4248,
         "num_wire_bits":     4308,
         "num_pub_wires":     42,
         "num_pub_wire_bits": 102,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         4242,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111o_2": 6,
            "sky130_fd_sc_hd__a211o_2": 27,
            "sky130_fd_sc_hd__a211oi_2": 5,
            "sky130_fd_sc_hd__a21bo_2": 58,
            "sky130_fd_sc_hd__a21boi_2": 52,
            "sky130_fd_sc_hd__a21o_2": 154,
            "sky130_fd_sc_hd__a21oi_2": 310,
            "sky130_fd_sc_hd__a221o_2": 1,
            "sky130_fd_sc_hd__a221oi_2": 1,
            "sky130_fd_sc_hd__a22o_2": 34,
            "sky130_fd_sc_hd__a22oi_2": 7,
            "sky130_fd_sc_hd__a2bb2o_2": 10,
            "sky130_fd_sc_hd__a311o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 84,
            "sky130_fd_sc_hd__a31oi_2": 6,
            "sky130_fd_sc_hd__a32o_2": 12,
            "sky130_fd_sc_hd__a32oi_2": 6,
            "sky130_fd_sc_hd__a41o_2": 3,
            "sky130_fd_sc_hd__and2_2": 110,
            "sky130_fd_sc_hd__and2b_2": 119,
            "sky130_fd_sc_hd__and3_2": 106,
            "sky130_fd_sc_hd__and3b_2": 3,
            "sky130_fd_sc_hd__and4_2": 23,
            "sky130_fd_sc_hd__and4b_2": 1,
            "sky130_fd_sc_hd__and4bb_2": 90,
            "sky130_fd_sc_hd__buf_1": 40,
            "sky130_fd_sc_hd__dfrtp_2": 31,
            "sky130_fd_sc_hd__dfstp_2": 1,
            "sky130_fd_sc_hd__inv_2": 101,
            "sky130_fd_sc_hd__inv_4": 2,
            "sky130_fd_sc_hd__mux2_2": 2,
            "sky130_fd_sc_hd__nand2_2": 434,
            "sky130_fd_sc_hd__nand2b_2": 7,
            "sky130_fd_sc_hd__nand3_2": 26,
            "sky130_fd_sc_hd__nand3b_2": 4,
            "sky130_fd_sc_hd__nand4_2": 4,
            "sky130_fd_sc_hd__nand4b_2": 1,
            "sky130_fd_sc_hd__nor2_2": 455,
            "sky130_fd_sc_hd__nor3_2": 28,
            "sky130_fd_sc_hd__nor4_2": 1,
            "sky130_fd_sc_hd__o2111a_2": 1,
            "sky130_fd_sc_hd__o2111ai_2": 1,
            "sky130_fd_sc_hd__o211a_2": 12,
            "sky130_fd_sc_hd__o211ai_2": 4,
            "sky130_fd_sc_hd__o21a_2": 76,
            "sky130_fd_sc_hd__o21ai_2": 65,
            "sky130_fd_sc_hd__o21ba_2": 26,
            "sky130_fd_sc_hd__o21bai_2": 2,
            "sky130_fd_sc_hd__o221a_2": 4,
            "sky130_fd_sc_hd__o221ai_2": 1,
            "sky130_fd_sc_hd__o22a_2": 50,
            "sky130_fd_sc_hd__o22ai_2": 17,
            "sky130_fd_sc_hd__o2bb2a_2": 11,
            "sky130_fd_sc_hd__o311a_2": 5,
            "sky130_fd_sc_hd__o31a_2": 8,
            "sky130_fd_sc_hd__o31ai_2": 1,
            "sky130_fd_sc_hd__o32a_2": 3,
            "sky130_fd_sc_hd__o32ai_2": 2,
            "sky130_fd_sc_hd__o41a_2": 1,
            "sky130_fd_sc_hd__or2_2": 146,
            "sky130_fd_sc_hd__or2b_2": 348,
            "sky130_fd_sc_hd__or3_2": 35,
            "sky130_fd_sc_hd__or3b_2": 15,
            "sky130_fd_sc_hd__or4_2": 23,
            "sky130_fd_sc_hd__or4b_2": 4,
            "sky130_fd_sc_hd__or4bb_2": 26,
            "sky130_fd_sc_hd__xnor2_2": 689,
            "sky130_fd_sc_hd__xor2_2": 300
         }
      }
   },
      "design": {
         "num_wires":         4248,
         "num_wire_bits":     4308,
         "num_pub_wires":     42,
         "num_pub_wire_bits": 102,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         4242,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111o_2": 6,
            "sky130_fd_sc_hd__a211o_2": 27,
            "sky130_fd_sc_hd__a211oi_2": 5,
            "sky130_fd_sc_hd__a21bo_2": 58,
            "sky130_fd_sc_hd__a21boi_2": 52,
            "sky130_fd_sc_hd__a21o_2": 154,
            "sky130_fd_sc_hd__a21oi_2": 310,
            "sky130_fd_sc_hd__a221o_2": 1,
            "sky130_fd_sc_hd__a221oi_2": 1,
            "sky130_fd_sc_hd__a22o_2": 34,
            "sky130_fd_sc_hd__a22oi_2": 7,
            "sky130_fd_sc_hd__a2bb2o_2": 10,
            "sky130_fd_sc_hd__a311o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 84,
            "sky130_fd_sc_hd__a31oi_2": 6,
            "sky130_fd_sc_hd__a32o_2": 12,
            "sky130_fd_sc_hd__a32oi_2": 6,
            "sky130_fd_sc_hd__a41o_2": 3,
            "sky130_fd_sc_hd__and2_2": 110,
            "sky130_fd_sc_hd__and2b_2": 119,
            "sky130_fd_sc_hd__and3_2": 106,
            "sky130_fd_sc_hd__and3b_2": 3,
            "sky130_fd_sc_hd__and4_2": 23,
            "sky130_fd_sc_hd__and4b_2": 1,
            "sky130_fd_sc_hd__and4bb_2": 90,
            "sky130_fd_sc_hd__buf_1": 40,
            "sky130_fd_sc_hd__dfrtp_2": 31,
            "sky130_fd_sc_hd__dfstp_2": 1,
            "sky130_fd_sc_hd__inv_2": 101,
            "sky130_fd_sc_hd__inv_4": 2,
            "sky130_fd_sc_hd__mux2_2": 2,
            "sky130_fd_sc_hd__nand2_2": 434,
            "sky130_fd_sc_hd__nand2b_2": 7,
            "sky130_fd_sc_hd__nand3_2": 26,
            "sky130_fd_sc_hd__nand3b_2": 4,
            "sky130_fd_sc_hd__nand4_2": 4,
            "sky130_fd_sc_hd__nand4b_2": 1,
            "sky130_fd_sc_hd__nor2_2": 455,
            "sky130_fd_sc_hd__nor3_2": 28,
            "sky130_fd_sc_hd__nor4_2": 1,
            "sky130_fd_sc_hd__o2111a_2": 1,
            "sky130_fd_sc_hd__o2111ai_2": 1,
            "sky130_fd_sc_hd__o211a_2": 12,
            "sky130_fd_sc_hd__o211ai_2": 4,
            "sky130_fd_sc_hd__o21a_2": 76,
            "sky130_fd_sc_hd__o21ai_2": 65,
            "sky130_fd_sc_hd__o21ba_2": 26,
            "sky130_fd_sc_hd__o21bai_2": 2,
            "sky130_fd_sc_hd__o221a_2": 4,
            "sky130_fd_sc_hd__o221ai_2": 1,
            "sky130_fd_sc_hd__o22a_2": 50,
            "sky130_fd_sc_hd__o22ai_2": 17,
            "sky130_fd_sc_hd__o2bb2a_2": 11,
            "sky130_fd_sc_hd__o311a_2": 5,
            "sky130_fd_sc_hd__o31a_2": 8,
            "sky130_fd_sc_hd__o31ai_2": 1,
            "sky130_fd_sc_hd__o32a_2": 3,
            "sky130_fd_sc_hd__o32ai_2": 2,
            "sky130_fd_sc_hd__o41a_2": 1,
            "sky130_fd_sc_hd__or2_2": 146,
            "sky130_fd_sc_hd__or2b_2": 348,
            "sky130_fd_sc_hd__or3_2": 35,
            "sky130_fd_sc_hd__or3b_2": 15,
            "sky130_fd_sc_hd__or4_2": 23,
            "sky130_fd_sc_hd__or4b_2": 4,
            "sky130_fd_sc_hd__or4bb_2": 26,
            "sky130_fd_sc_hd__xnor2_2": 689,
            "sky130_fd_sc_hd__xor2_2": 300
         }
      }
}

57. Executing Verilog backend.
Dumping module `\svm'.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 822d966fbd, CPU: user 1.27s system 0.02s, MEM: 49.86 MB peak
Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 85% 2x abc (7 sec), 3% 27x opt_expr (0 sec), ...
