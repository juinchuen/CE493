
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
Reading SCL library '/home/jco1147/393_folder/openlane/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib' as a blackboxâ¦

1. Executing Liberty frontend: /home/jco1147/393_folder/openlane/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: svm.sv
Parsing SystemVerilog input from `svm.sv' to AST representation.
Generating RTLIL representation for module `\v_to_t'.
Generating RTLIL representation for module `\svm'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \svm
Used module:     \v_to_t
Parameter \D_WIDTH = 16

3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\v_to_t'.
Parameter \D_WIDTH = 16
Generating RTLIL representation for module `$paramod\v_to_t\D_WIDTH=s32'00000000000000000000000000010000'.

3.3. Analyzing design hierarchy..
Top module:  \svm
Used module:     $paramod\v_to_t\D_WIDTH=s32'00000000000000000000000000010000

3.4. Analyzing design hierarchy..
Top module:  \svm
Used module:     $paramod\v_to_t\D_WIDTH=s32'00000000000000000000000000010000
Removing unused module `\v_to_t'.
Removed 1 unused modules.
Renaming module svm to svm.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$svm.sv:79$19 in module svm.
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rstb in `\svm.$proc$svm.sv:79$19'.

4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\svm.$proc$svm.sv:79$19'.
     1/12: $0\tC[15:0]
     2/12: $0\tB[15:0]
     3/12: $0\tA[15:0]
     4/12: $0\vC_store[15:0]
     5/12: $0\vB_store[15:0]
     6/12: $0\vA_store[15:0]
     7/12: $0\calc_ready[0:0]
     8/12: $0\rising[0:0]
     9/12: $0\delta[15:0]
    10/12: $0\counter[15:0]
    11/12: $0\state[2:0]
    12/12: $0\ready[0:0]

4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\svm.\ready' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$116' with negative edge clock and negative level reset.
Creating register for signal `\svm.\state' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$117' with negative edge clock and negative level reset.
Creating register for signal `\svm.\counter' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$118' with negative edge clock and negative level reset.
Creating register for signal `\svm.\delta' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$119' with negative edge clock and negative level reset.
Creating register for signal `\svm.\rising' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$120' with negative edge clock and negative level reset.
Creating register for signal `\svm.\calc_ready' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$121' with negative edge clock and negative level reset.
Creating register for signal `\svm.\vA_store' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$122' with negative edge clock and negative level reset.
Creating register for signal `\svm.\vB_store' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$123' with negative edge clock and negative level reset.
Creating register for signal `\svm.\vC_store' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$124' with negative edge clock and negative level reset.
Creating register for signal `\svm.\tA' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$125' with negative edge clock and negative level reset.
Creating register for signal `\svm.\tB' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$126' with negative edge clock and negative level reset.
Creating register for signal `\svm.\tC' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$127' with negative edge clock and negative level reset.

4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\svm.$proc$svm.sv:79$19'.
Removing empty process `svm.$proc$svm.sv:79$19'.
Cleaned up 3 empty switches.

4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.
<suppressed ~7 debug messages>
Optimizing module $paramod\v_to_t\D_WIDTH=s32'00000000000000000000000000010000.

End of script. Logfile hash: 4bd91a9e1c, CPU: user 0.17s system 0.01s, MEM: 39.34 MB peak
Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 72% 2x read_liberty (0 sec), 17% 1x proc_dff (0 sec), ...
