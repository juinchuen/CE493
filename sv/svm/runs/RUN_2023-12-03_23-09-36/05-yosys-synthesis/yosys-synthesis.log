
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
Reading SCL library '/home/jco1147/393_folder/openlane/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib' as a blackboxâ¦

1. Executing Liberty frontend: /home/jco1147/393_folder/openlane/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: svm.sv
Parsing SystemVerilog input from `svm.sv' to AST representation.
Generating RTLIL representation for module `\v_to_t'.
Generating RTLIL representation for module `\svm'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/home/jco1147/393_folder/CE493/sv/svm/runs/RUN_2023-12-03_23-09-36/05-yosys-synthesis/hierarchy.dot'.
Dumping module svm to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \svm
Used module:     \v_to_t
Parameter \D_WIDTH = 16

4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\v_to_t'.
Parameter \D_WIDTH = 16
Generating RTLIL representation for module `$paramod\v_to_t\D_WIDTH=s32'00000000000000000000000000010000'.

4.3. Analyzing design hierarchy..
Top module:  \svm
Used module:     $paramod\v_to_t\D_WIDTH=s32'00000000000000000000000000010000

4.4. Analyzing design hierarchy..
Top module:  \svm
Used module:     $paramod\v_to_t\D_WIDTH=s32'00000000000000000000000000010000
Removing unused module `\v_to_t'.
Removed 1 unused modules.
Renaming module svm to svm.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \svm
Used module:     $paramod\v_to_t\D_WIDTH=s32'00000000000000000000000000010000

5.2. Analyzing design hierarchy..
Top module:  \svm
Used module:     $paramod\v_to_t\D_WIDTH=s32'00000000000000000000000000010000
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$svm.sv:79$19 in module svm.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rstb in `\svm.$proc$svm.sv:79$19'.

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\svm.$proc$svm.sv:79$19'.
     1/12: $0\tC[15:0]
     2/12: $0\tB[15:0]
     3/12: $0\tA[15:0]
     4/12: $0\vC_store[15:0]
     5/12: $0\vB_store[15:0]
     6/12: $0\vA_store[15:0]
     7/12: $0\calc_ready[0:0]
     8/12: $0\rising[0:0]
     9/12: $0\delta[15:0]
    10/12: $0\counter[15:0]
    11/12: $0\state[2:0]
    12/12: $0\ready[0:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\svm.\ready' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$116' with negative edge clock and negative level reset.
Creating register for signal `\svm.\state' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$117' with negative edge clock and negative level reset.
Creating register for signal `\svm.\counter' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$118' with negative edge clock and negative level reset.
Creating register for signal `\svm.\delta' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$119' with negative edge clock and negative level reset.
Creating register for signal `\svm.\rising' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$120' with negative edge clock and negative level reset.
Creating register for signal `\svm.\calc_ready' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$121' with negative edge clock and negative level reset.
Creating register for signal `\svm.\vA_store' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$122' with negative edge clock and negative level reset.
Creating register for signal `\svm.\vB_store' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$123' with negative edge clock and negative level reset.
Creating register for signal `\svm.\vC_store' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$124' with negative edge clock and negative level reset.
Creating register for signal `\svm.\tA' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$125' with negative edge clock and negative level reset.
Creating register for signal `\svm.\tB' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$126' with negative edge clock and negative level reset.
Creating register for signal `\svm.\tC' using process `\svm.$proc$svm.sv:79$19'.
  created $adff cell `$procdff$127' with negative edge clock and negative level reset.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\svm.$proc$svm.sv:79$19'.
Removing empty process `svm.$proc$svm.sv:79$19'.
Cleaned up 3 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module svm...
Checking module $paramod\v_to_t\D_WIDTH=s32'00000000000000000000000000010000...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.
<suppressed ~7 debug messages>
Optimizing module $paramod\v_to_t\D_WIDTH=s32'00000000000000000000000000010000.

19. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\v_to_t\D_WIDTH=s32'00000000000000000000000000010000.
<suppressed ~1 debug messages>

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 13 unused cells and 47 unused wires.
<suppressed ~24 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
<suppressed ~63 debug messages>
Removed a total of 21 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$svm.sv:159$42: \rising -> 1'1
      Replacing known input bits on port A of cell $ternary$svm.sv:161$45: \rising -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 21 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register svm.state.

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\state' from module `\svm'.
  found $adff cell for state register: $procdff$117
  root of input selection tree: $0\state[2:0]
  found reset state: 3'000 (from async reset)
  found ctrl input: $procmux$102_CMP
  found ctrl input: $eq$svm.sv:53$5_Y
  found ctrl input: $eq$svm.sv:52$4_Y
  found ctrl input: $eq$svm.sv:51$3_Y
  found ctrl input: $procmux$108_CMP
  found ctrl input: $and$svm.sv:144$23_Y
  found state code: 3'100
  found state code: 3'011
  found state code: 3'010
  found ctrl input: \in_valid
  found state code: 3'001
  found ctrl output: $eq$svm.sv:51$3_Y
  found ctrl output: $eq$svm.sv:52$4_Y
  found ctrl output: $eq$svm.sv:53$5_Y
  found ctrl output: $procmux$102_CMP
  found ctrl output: $procmux$108_CMP
  ctrl inputs: { $and$svm.sv:144$23_Y \in_valid }
  ctrl outputs: { $procmux$108_CMP $procmux$102_CMP $0\state[2:0] $eq$svm.sv:53$5_Y $eq$svm.sv:52$4_Y $eq$svm.sv:51$3_Y }
  transition:      3'000 2'-0 ->      3'000 8'10000000
  transition:      3'000 2'-1 ->      3'001 8'10001000
  transition:      3'100 2'0- ->      3'100 8'01100000
  transition:      3'100 2'1- ->      3'000 8'01000000
  transition:      3'010 2'-- ->      3'011 8'00011010
  transition:      3'001 2'-- ->      3'010 8'00010001
  transition:      3'011 2'-- ->      3'100 8'00100100

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$128' from module `\svm'.

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 9 unused cells and 9 unused wires.
<suppressed ~10 debug messages>

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$128' from module `\svm'.
  Removing unused output signal $0\state[2:0] [0].
  Removing unused output signal $0\state[2:0] [1].
  Removing unused output signal $0\state[2:0] [2].

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\state$128' from module `\svm' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  000 -> ----1
  100 -> ---1-
  010 -> --1--
  001 -> -1---
  011 -> 1----

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\state$128' from module `svm':
-------------------------------------

  Information on FSM $fsm$\state$128 (\state):

  Number of input signals:    2
  Number of output signals:   5
  Number of state bits:       5

  Input signals:
    0: \in_valid
    1: $and$svm.sv:144$23_Y

  Output signals:
    0: $eq$svm.sv:51$3_Y
    1: $eq$svm.sv:52$4_Y
    2: $eq$svm.sv:53$5_Y
    3: $procmux$102_CMP
    4: $procmux$108_CMP

  State encoding:
    0:    5'----1  <RESET STATE>
    1:    5'---1-
    2:    5'--1--
    3:    5'-1---
    4:    5'1----

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 2'-0   ->     0 5'10000
      1:     0 2'-1   ->     3 5'10000
      2:     1 2'1-   ->     0 5'01000
      3:     1 2'0-   ->     1 5'01000
      4:     2 2'--   ->     4 5'00010
      5:     3 2'--   ->     2 5'00001
      6:     4 2'--   ->     1 5'00100

-------------------------------------

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\state$128' from module `\svm'.

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.
<suppressed ~4 debug messages>

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$127 ($adff) from module svm (D = \v2t0.t_long [31:16], Q = \tC).
Adding EN signal on $procdff$126 ($adff) from module svm (D = \v2t0.t_long [31:16], Q = \tB).
Adding EN signal on $procdff$125 ($adff) from module svm (D = \v2t0.t_long [31:16], Q = \tA).
Adding EN signal on $procdff$121 ($adff) from module svm (D = $0\calc_ready[0:0], Q = \calc_ready).
Adding EN signal on $procdff$120 ($adff) from module svm (D = $ternary$svm.sv:159$46_Y, Q = \rising).
Adding EN signal on $procdff$119 ($adff) from module svm (D = $0\delta[15:0], Q = \delta).
Adding EN signal on $procdff$118 ($adff) from module svm (D = $add$svm.sv:153$24_Y, Q = \counter).
Adding EN signal on $procdff$116 ($adff) from module svm (D = $0\ready[0:0], Q = \ready).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 5 unused cells and 15 unused wires.
<suppressed ~6 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.
<suppressed ~3 debug messages>

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

24.16. Rerunning OPT passes. (Maybe there is more to do..)

24.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

24.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

24.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

24.20. Executing OPT_DFF pass (perform DFF optimizations).

24.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

24.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

24.23. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 16 bits (of 32) from mux cell svm.$ternary$svm.sv:53$7 ($mux).
Removed top 16 bits (of 32) from mux cell svm.$ternary$svm.sv:52$9 ($mux).
Removed top 16 bits (of 32) from mux cell svm.$ternary$svm.sv:51$11 ($mux).
Removed top 15 bits (of 16) from port B of cell svm.$eq$svm.sv:144$22 ($eq).
Removed top 31 bits (of 32) from port B of cell svm.$sub$svm.sv:155$25 ($sub).
Removed top 15 bits (of 32) from port Y of cell svm.$sub$svm.sv:155$25 ($sub).
Removed top 16 bits (of 32) from port A of cell svm.$not$svm.sv:155$28 ($not).
Removed top 31 bits (of 32) from port B of cell svm.$add$svm.sv:157$35 ($add).
Removed top 16 bits (of 32) from mux cell svm.$ternary$svm.sv:155$38 ($mux).
Removed top 1 bits (of 16) from port A of cell svm.$flatten\v2t0.$sub$svm.sv:13$47 ($sub).
Removed top 16 bits (of 32) from mux cell svm.$ternary$svm.sv:155$31 ($mux).
Removed top 16 bits (of 32) from mux cell svm.$ternary$svm.sv:157$37 ($mux).
Removed top 16 bits (of 32) from port Y of cell svm.$add$svm.sv:157$35 ($add).
Removed top 16 bits (of 32) from port A of cell svm.$add$svm.sv:157$35 ($add).
Removed top 16 bits (of 32) from port Y of cell svm.$not$svm.sv:155$28 ($not).
Removed top 16 bits (of 32) from wire svm.$add$svm.sv:155$29_Y.
Removed top 16 bits (of 32) from wire svm.$not$svm.sv:155$28_Y.
Removed top 16 bits (of 32) from wire svm.$ternary$svm.sv:52$9_Y.
Removed top 16 bits (of 32) from wire svm.$ternary$svm.sv:53$7_Y.

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module svm:
  creating $macc model for $add$svm.sv:153$24 ($add).
  creating $macc model for $add$svm.sv:157$35 ($add).
  creating $macc model for $flatten\v2t0.$mul$svm.sv:15$48 ($mul).
  creating $macc model for $flatten\v2t0.$sub$svm.sv:13$47 ($sub).
  creating $macc model for $sub$svm.sv:155$25 ($sub).
  creating $alu model for $macc $sub$svm.sv:155$25.
  creating $alu model for $macc $flatten\v2t0.$sub$svm.sv:13$47.
  creating $alu model for $macc $add$svm.sv:157$35.
  creating $alu model for $macc $add$svm.sv:153$24.
  creating $macc cell for $flatten\v2t0.$mul$svm.sv:15$48: $auto$alumacc.cc:365:replace_macc$193
  creating $alu model for $ge$svm.sv:57$12 ($ge): new $alu
  creating $alu model for $ge$svm.sv:58$14 ($ge): new $alu
  creating $alu model for $ge$svm.sv:59$16 ($ge): new $alu
  creating $alu cell for $ge$svm.sv:59$16: $auto$alumacc.cc:485:replace_alu$197
  creating $alu cell for $ge$svm.sv:58$14: $auto$alumacc.cc:485:replace_alu$210
  creating $alu cell for $ge$svm.sv:57$12: $auto$alumacc.cc:485:replace_alu$223
  creating $alu cell for $add$svm.sv:153$24: $auto$alumacc.cc:485:replace_alu$236
  creating $alu cell for $add$svm.sv:157$35: $auto$alumacc.cc:485:replace_alu$239
  creating $alu cell for $flatten\v2t0.$sub$svm.sv:13$47: $auto$alumacc.cc:485:replace_alu$242
  creating $alu cell for $sub$svm.sv:155$25: $auto$alumacc.cc:485:replace_alu$245
  created 7 $alu and 1 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

30.9. Rerunning OPT passes. (Maybe there is more to do..)

30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

30.13. Executing OPT_DFF pass (perform DFF optimizations).

30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

30.16. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.
<suppressed ~13 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 22 unused wires.
<suppressed ~1 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.
<suppressed ~2 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

35.10. Rerunning OPT passes. (Maybe there is more to do..)

35.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

35.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

35.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

35.14. Executing OPT_SHARE pass.

35.15. Executing OPT_DFF pass (perform DFF optimizations).

35.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

35.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

35.18. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /home/ece393/oss-cad-suite-20231016/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/ece393/oss-cad-suite-20231016/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using extmapper maccmap for cells of type $macc.
  add \periodTop * \v2t0.diff (16x16 bits, unsigned)
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$2af30114e9bd4ccb04dad757b3f0a8f6bf0615b0\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$adbaf76fa5a3091a329503792521395f8ff4d1a4\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$d588c4475f18bc347201f0f2671d73b8c1e7b7ea\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000100000 for cells of type $fa.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
No more expansions possible.
<suppressed ~1448 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.
<suppressed ~1773 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
<suppressed ~153 debug messages>
Removed a total of 51 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$826 ($_DFFE_NN1P_) from module svm (D = $0\delta[15:0] [0], Q = \delta [0]).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 218 unused cells and 556 unused wires.
<suppressed ~219 debug messages>

37.5. Rerunning OPT passes. (Removed registers in this run.)

37.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.
<suppressed ~1 debug messages>

37.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

37.8. Executing OPT_DFF pass (perform DFF optimizations).

37.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

37.10. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\svm' to `<abc-temp-dir>/input.blif'..
Replacing 1 occurrences of constant undef bits with constant zero bits
Extracted 2210 gates and 2365 wires to a netlist network with 152 inputs and 61 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       36
ABC RESULTS:              XNOR cells:      173
ABC RESULTS:               XOR cells:      438
ABC RESULTS:               NOR cells:       85
ABC RESULTS:               AND cells:       61
ABC RESULTS:              NAND cells:       57
ABC RESULTS:             ORNOT cells:      127
ABC RESULTS:                OR cells:      242
ABC RESULTS:            ANDNOT cells:      852
ABC RESULTS:               NOT cells:       50
ABC RESULTS:        internal signals:     2152
ABC RESULTS:           input signals:      152
ABC RESULTS:          output signals:       61
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.
<suppressed ~2 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 633 unused wires.
<suppressed ~4 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \svm

40.2. Analyzing design hierarchy..
Top module:  \svm
Removed 0 unused modules.

41. Printing statistics.

=== svm ===

   Number of wires:               2091
   Number of wire bits:           2351
   Number of public wires:          24
   Number of public wire bits:     239
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2203
     $_ANDNOT_                     852
     $_AND_                         61
     $_DFFE_NN0P_                   80
     $_DFFE_NN1P_                    3
     $_DFF_NN0_                      4
     $_DFF_NN1_                      1
     $_MUX_                         36
     $_NAND_                        57
     $_NOR_                         85
     $_NOT_                         49
     $_ORNOT_                      127
     $_OR_                         237
     $_XNOR_                       173
     $_XOR_                        438

42. Executing CHECK pass (checking for obvious problems).
Checking module svm...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/home/jco1147/393_folder/CE493/sv/svm/runs/RUN_2023-12-03_23-09-36/05-yosys-synthesis/post_techmap.dot'.
Dumping module svm to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \svm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \svm.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\svm'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module svm.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 3 unused wires.
<suppressed ~3 debug messages>
{
   "creator": "Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\svm": {
         "num_wires":         2088,
         "num_wire_bits":     2287,
         "num_pub_wires":     21,
         "num_pub_wire_bits": 175,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         2203,
         "num_cells_by_type": {
            "$_ANDNOT_": 852,
            "$_AND_": 61,
            "$_DFFE_NN0P_": 80,
            "$_DFFE_NN1P_": 3,
            "$_DFF_NN0_": 4,
            "$_DFF_NN1_": 1,
            "$_MUX_": 36,
            "$_NAND_": 57,
            "$_NOR_": 85,
            "$_NOT_": 49,
            "$_ORNOT_": 127,
            "$_OR_": 237,
            "$_XNOR_": 173,
            "$_XOR_": 438
         }
      }
   },
      "design": {
         "num_wires":         2088,
         "num_wire_bits":     2287,
         "num_pub_wires":     21,
         "num_pub_wire_bits": 175,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         2203,
         "num_cells_by_type": {
            "$_ANDNOT_": 852,
            "$_AND_": 61,
            "$_DFFE_NN0P_": 80,
            "$_DFFE_NN1P_": 3,
            "$_DFF_NN0_": 4,
            "$_DFF_NN1_": 1,
            "$_MUX_": 36,
            "$_NAND_": 57,
            "$_NOR_": 85,
            "$_NOT_": 49,
            "$_ORNOT_": 127,
            "$_OR_": 237,
            "$_XNOR_": 173,
            "$_XOR_": 438
         }
      }
}

[INFO] Applying latch mapping from '/home/jco1147/393_folder/openlane/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â¦

47. Executing TECHMAP pass (map to technology primitives).

47.1. Executing Verilog-2005 frontend: /home/jco1147/393_folder/openlane/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/jco1147/393_folder/openlane/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

47.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

48. Executing SIMPLEMAP pass (map simple cells to gate primitives).

49. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

49.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\svm':
  mapped 84 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 4 $_DFF_PN1_ cells to \sky130_fd_sc_hd__dfstp_2 cells.
{
   "creator": "Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\svm": {
         "num_wires":         2259,
         "num_wire_bits":     2458,
         "num_pub_wires":     21,
         "num_pub_wire_bits": 175,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         2374,
         "num_cells_by_type": {
            "$_ANDNOT_": 852,
            "$_AND_": 61,
            "$_MUX_": 119,
            "$_NAND_": 57,
            "$_NOR_": 85,
            "$_NOT_": 137,
            "$_ORNOT_": 127,
            "$_OR_": 237,
            "$_XNOR_": 173,
            "$_XOR_": 438,
            "sky130_fd_sc_hd__dfrtp_2": 84,
            "sky130_fd_sc_hd__dfstp_2": 4
         }
      }
   },
      "design": {
         "num_wires":         2259,
         "num_wire_bits":     2458,
         "num_pub_wires":     21,
         "num_pub_wire_bits": 175,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         2374,
         "num_cells_by_type": {
            "$_ANDNOT_": 852,
            "$_AND_": 61,
            "$_MUX_": 119,
            "$_NAND_": 57,
            "$_NOR_": 85,
            "$_NOT_": 137,
            "$_ORNOT_": 127,
            "$_OR_": 237,
            "$_XNOR_": 173,
            "$_XOR_": 438,
            "sky130_fd_sc_hd__dfrtp_2": 84,
            "sky130_fd_sc_hd__dfstp_2": 4
         }
      }
}

[INFO] USING STRATEGY AREA 0

50. Executing ABC pass (technology mapping using ABC).

50.1. Extracting gate netlist of module `\svm' to `/tmp/yosys-abc-quJskL/input.blif'..
Extracted 2286 gates and 2440 wires to a netlist network with 154 inputs and 178 outputs.

50.1.1. Executing ABC.
Running ABC command: "/home/ece393/oss-cad-suite-20231016/lib/yosys-abc" -s -f /tmp/yosys-abc-quJskL/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-quJskL/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-quJskL/input.blif 
ABC: + read_lib -w /home/jco1147/393_folder/CE493/sv/svm/runs/RUN_2023-12-03_23-09-36/tmp/7f770435557848d897d0697527605d06.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/jco1147/393_folder/CE493/sv/svm/runs/RUN_2023-12-03_23-09-36/tmp/7f770435557848d897d0697527605d06.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.06 sec
ABC: Memory =    9.54 MB. Time =     0.06 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/jco1147/393_folder/CE493/sv/svm/runs/RUN_2023-12-03_23-09-36/05-yosys-synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /home/jco1147/393_folder/CE493/sv/svm/runs/RUN_2023-12-03_23-09-36/05-yosys-synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + upsize -D 10000 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: Current delay (6424.37 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + stime -p 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =   1905 ( 12.5 %)   Cap = 11.2 ff (  2.2 %)   Area =    17138.94 ( 87.5 %)   Delay =  6675.57 ps  (  2.6 %)               
ABC: Path  0 --       2 : 0   49 pi                      A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout = 150.4 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    1685 : 3    1 sky130_fd_sc_hd__mux2_2 A =  11.26  Df =6456.7 -296.4 ps  S =  45.5 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 297.6 ff  G =   92  
ABC: Path  2 --    1686 : 1    1 sky130_fd_sc_hd__buf_1  A =   3.75  Df =6675.6 -195.2 ps  S = 396.3 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi1 (\state [2]).  End-point = po3 ($auto$rtlil.cc:2669:MuxGate$7698).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  154/  178  lat =    0  nd =  1905  edge =   5053  area =17141.13  delay =26.00  lev = 26
ABC: + write_blif /tmp/yosys-abc-quJskL/output.blif 

50.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       34
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:       22
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       43
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       93
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       68
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       29
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       67
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:      129
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       40
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       50
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:       53
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:      105
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      177
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       43
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       94
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       49
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       90
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       86
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:       26
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       49
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       37
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       99
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:      139
ABC RESULTS:        internal signals:     2108
ABC RESULTS:           input signals:      154
ABC RESULTS:          output signals:      178
Removing temp directory.

51. Executing SETUNDEF pass (replace undef values with defined constants).

52. Executing HILOMAP pass (mapping to constant drivers).
Warning: Selection "sky130_fd_sc_hd__conb_1" did not match any module.
Warning: Selection "LO" did not match any object.

53. Executing SPLITNETS pass (splitting up multi-bit signals).

54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \svm..
Removed 0 unused cells and 2457 unused wires.
<suppressed ~17 debug messages>

55. Executing INSBUF pass (insert buffer cells for connected wires).

56. Executing CHECK pass (checking for obvious problems).
Checking module svm...
Found and reported 0 problems.
{
   "creator": "Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\svm": {
         "num_wires":         2000,
         "num_wire_bits":     2060,
         "num_pub_wires":     99,
         "num_pub_wire_bits": 159,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         1993,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211o_2": 17,
            "sky130_fd_sc_hd__a211oi_2": 16,
            "sky130_fd_sc_hd__a21bo_2": 43,
            "sky130_fd_sc_hd__a21boi_2": 7,
            "sky130_fd_sc_hd__a21o_2": 105,
            "sky130_fd_sc_hd__a21oi_2": 90,
            "sky130_fd_sc_hd__a221o_2": 12,
            "sky130_fd_sc_hd__a22o_2": 86,
            "sky130_fd_sc_hd__a22oi_2": 22,
            "sky130_fd_sc_hd__a2bb2o_2": 21,
            "sky130_fd_sc_hd__a311o_2": 3,
            "sky130_fd_sc_hd__a31o_2": 50,
            "sky130_fd_sc_hd__a31oi_2": 2,
            "sky130_fd_sc_hd__a32o_2": 8,
            "sky130_fd_sc_hd__a41o_2": 2,
            "sky130_fd_sc_hd__and2_2": 49,
            "sky130_fd_sc_hd__and2b_2": 37,
            "sky130_fd_sc_hd__and3_2": 68,
            "sky130_fd_sc_hd__and3b_2": 2,
            "sky130_fd_sc_hd__and4_2": 34,
            "sky130_fd_sc_hd__and4bb_2": 2,
            "sky130_fd_sc_hd__buf_1": 99,
            "sky130_fd_sc_hd__dfrtp_2": 84,
            "sky130_fd_sc_hd__dfstp_2": 4,
            "sky130_fd_sc_hd__inv_2": 139,
            "sky130_fd_sc_hd__mux2_2": 53,
            "sky130_fd_sc_hd__nand2_2": 177,
            "sky130_fd_sc_hd__nand3_2": 93,
            "sky130_fd_sc_hd__nand3b_2": 24,
            "sky130_fd_sc_hd__nand4_2": 25,
            "sky130_fd_sc_hd__nor2_2": 94,
            "sky130_fd_sc_hd__nor3_2": 11,
            "sky130_fd_sc_hd__nor3b_2": 1,
            "sky130_fd_sc_hd__nor4_2": 2,
            "sky130_fd_sc_hd__o2111a_2": 1,
            "sky130_fd_sc_hd__o211a_2": 17,
            "sky130_fd_sc_hd__o211ai_2": 14,
            "sky130_fd_sc_hd__o21a_2": 40,
            "sky130_fd_sc_hd__o21ai_2": 43,
            "sky130_fd_sc_hd__o21ba_2": 26,
            "sky130_fd_sc_hd__o21bai_2": 4,
            "sky130_fd_sc_hd__o221a_2": 12,
            "sky130_fd_sc_hd__o22a_2": 11,
            "sky130_fd_sc_hd__o22ai_2": 3,
            "sky130_fd_sc_hd__o2bb2a_2": 1,
            "sky130_fd_sc_hd__o31a_2": 10,
            "sky130_fd_sc_hd__o31ai_2": 2,
            "sky130_fd_sc_hd__o32a_2": 2,
            "sky130_fd_sc_hd__or2_2": 49,
            "sky130_fd_sc_hd__or2b_2": 21,
            "sky130_fd_sc_hd__or3_2": 29,
            "sky130_fd_sc_hd__or3b_2": 8,
            "sky130_fd_sc_hd__or4_2": 19,
            "sky130_fd_sc_hd__or4b_2": 1,
            "sky130_fd_sc_hd__or4bb_2": 2,
            "sky130_fd_sc_hd__xnor2_2": 129,
            "sky130_fd_sc_hd__xor2_2": 67
         }
      }
   },
      "design": {
         "num_wires":         2000,
         "num_wire_bits":     2060,
         "num_pub_wires":     99,
         "num_pub_wire_bits": 159,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         1993,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211o_2": 17,
            "sky130_fd_sc_hd__a211oi_2": 16,
            "sky130_fd_sc_hd__a21bo_2": 43,
            "sky130_fd_sc_hd__a21boi_2": 7,
            "sky130_fd_sc_hd__a21o_2": 105,
            "sky130_fd_sc_hd__a21oi_2": 90,
            "sky130_fd_sc_hd__a221o_2": 12,
            "sky130_fd_sc_hd__a22o_2": 86,
            "sky130_fd_sc_hd__a22oi_2": 22,
            "sky130_fd_sc_hd__a2bb2o_2": 21,
            "sky130_fd_sc_hd__a311o_2": 3,
            "sky130_fd_sc_hd__a31o_2": 50,
            "sky130_fd_sc_hd__a31oi_2": 2,
            "sky130_fd_sc_hd__a32o_2": 8,
            "sky130_fd_sc_hd__a41o_2": 2,
            "sky130_fd_sc_hd__and2_2": 49,
            "sky130_fd_sc_hd__and2b_2": 37,
            "sky130_fd_sc_hd__and3_2": 68,
            "sky130_fd_sc_hd__and3b_2": 2,
            "sky130_fd_sc_hd__and4_2": 34,
            "sky130_fd_sc_hd__and4bb_2": 2,
            "sky130_fd_sc_hd__buf_1": 99,
            "sky130_fd_sc_hd__dfrtp_2": 84,
            "sky130_fd_sc_hd__dfstp_2": 4,
            "sky130_fd_sc_hd__inv_2": 139,
            "sky130_fd_sc_hd__mux2_2": 53,
            "sky130_fd_sc_hd__nand2_2": 177,
            "sky130_fd_sc_hd__nand3_2": 93,
            "sky130_fd_sc_hd__nand3b_2": 24,
            "sky130_fd_sc_hd__nand4_2": 25,
            "sky130_fd_sc_hd__nor2_2": 94,
            "sky130_fd_sc_hd__nor3_2": 11,
            "sky130_fd_sc_hd__nor3b_2": 1,
            "sky130_fd_sc_hd__nor4_2": 2,
            "sky130_fd_sc_hd__o2111a_2": 1,
            "sky130_fd_sc_hd__o211a_2": 17,
            "sky130_fd_sc_hd__o211ai_2": 14,
            "sky130_fd_sc_hd__o21a_2": 40,
            "sky130_fd_sc_hd__o21ai_2": 43,
            "sky130_fd_sc_hd__o21ba_2": 26,
            "sky130_fd_sc_hd__o21bai_2": 4,
            "sky130_fd_sc_hd__o221a_2": 12,
            "sky130_fd_sc_hd__o22a_2": 11,
            "sky130_fd_sc_hd__o22ai_2": 3,
            "sky130_fd_sc_hd__o2bb2a_2": 1,
            "sky130_fd_sc_hd__o31a_2": 10,
            "sky130_fd_sc_hd__o31ai_2": 2,
            "sky130_fd_sc_hd__o32a_2": 2,
            "sky130_fd_sc_hd__or2_2": 49,
            "sky130_fd_sc_hd__or2b_2": 21,
            "sky130_fd_sc_hd__or3_2": 29,
            "sky130_fd_sc_hd__or3b_2": 8,
            "sky130_fd_sc_hd__or4_2": 19,
            "sky130_fd_sc_hd__or4b_2": 1,
            "sky130_fd_sc_hd__or4bb_2": 2,
            "sky130_fd_sc_hd__xnor2_2": 129,
            "sky130_fd_sc_hd__xor2_2": 67
         }
      }
}

57. Executing Verilog backend.
Dumping module `\svm'.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 7df9044494, CPU: user 0.85s system 0.03s, MEM: 42.60 MB peak
Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 78% 2x abc (2 sec), 5% 29x opt_expr (0 sec), ...
