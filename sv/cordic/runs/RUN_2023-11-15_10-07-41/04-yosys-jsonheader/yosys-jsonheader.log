
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
Reading SCL library '/home/jco1147/393_folder/openlane/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib' as a blackboxâ¦

1. Executing Liberty frontend: /home/jco1147/393_folder/openlane/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: cordic.sv
Parsing SystemVerilog input from `cordic.sv' to AST representation.
Generating RTLIL representation for module `\signed_lte'.
Generating RTLIL representation for module `\cordic'.
Warning: Replacing memory \vec with list of registers. See cordic.sv:47
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: gamma.sv
Parsing SystemVerilog input from `gamma.sv' to AST representation.
Generating RTLIL representation for module `\gamma_mem'.
Successfully finished Verilog frontend.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \cordic
Used module:     \signed_lte
Used module:     \gamma_mem

4.2. Analyzing design hierarchy..
Top module:  \cordic
Used module:     \signed_lte
Used module:     \gamma_mem
Removed 0 unused modules.
Renaming module cordic to cordic.

5. Executing PROC pass (convert processes to netlists).

5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$cordic.sv:40$6 in module cordic.
Removed a total of 0 dead cases.

5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

5.4. Executing PROC_INIT pass (extract init attributes).

5.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rstb in `\cordic.$proc$cordic.sv:40$6'.

5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\cordic.$proc$cordic.sv:40$6'.
     1/11: $0\theta_store[16:0] [16]
     2/11: $0\theta_store[16:0] [15:0]
     3/11: $0\vec[0][16:0]
     4/11: $0\theta_iter[16:0]
     5/11: $0\vec[1][16:0]
     6/11: $0\state[1:0]
     7/11: $0\iter[4:0]
     8/11: $0\cos[15:0]
     9/11: $0\sin[15:0]
    10/11: $0\out_valid[0:0]
    11/11: $0\ready[0:0]

5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

5.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\cordic.\ready' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$144' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\out_valid' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$145' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\sin' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$146' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\cos' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$147' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\iter' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$148' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\state' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$149' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\theta_store' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$150' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\theta_iter' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$151' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\vec[0]' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$152' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\vec[1]' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$153' with negative edge clock and negative level reset.

5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\cordic.$proc$cordic.sv:40$6'.
Removing empty process `cordic.$proc$cordic.sv:40$6'.
Cleaned up 3 empty switches.

5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.
<suppressed ~13 debug messages>
Optimizing module gamma_mem.
<suppressed ~1 debug messages>
Optimizing module signed_lte.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 6acb784fb1, CPU: user 0.18s system 0.01s, MEM: 39.08 MB peak
Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 69% 2x read_liberty (0 sec), 18% 1x proc_dff (0 sec), ...
