
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
Reading SCL library '/home/jco1147/393_folder/openlane/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib' as a blackboxâ¦

1. Executing Liberty frontend: /home/jco1147/393_folder/openlane/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: cordic.sv
Parsing SystemVerilog input from `cordic.sv' to AST representation.
Generating RTLIL representation for module `\signed_lte'.
Generating RTLIL representation for module `\cordic'.
Warning: Replacing memory \vec with list of registers. See cordic.sv:47
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: gamma.sv
Parsing SystemVerilog input from `gamma.sv' to AST representation.
Generating RTLIL representation for module `\gamma_mem'.
Successfully finished Verilog frontend.

4. Generating Graphviz representation of design.
Writing dot description to `/home/jco1147/393_folder/CE493/sv/cordic/runs/RUN_2023-11-15_10-07-41/05-yosys-synthesis/hierarchy.dot'.
Dumping module cordic to page 1.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \cordic
Used module:     \signed_lte
Used module:     \gamma_mem

5.2. Analyzing design hierarchy..
Top module:  \cordic
Used module:     \signed_lte
Used module:     \gamma_mem
Removed 0 unused modules.
Renaming module cordic to cordic.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \cordic
Used module:     \signed_lte
Used module:     \gamma_mem

6.2. Analyzing design hierarchy..
Top module:  \cordic
Used module:     \signed_lte
Used module:     \gamma_mem
Removed 0 unused modules.

7. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$cordic.sv:40$6 in module cordic.
Removed a total of 0 dead cases.

9. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

10. Executing PROC_INIT pass (extract init attributes).

11. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rstb in `\cordic.$proc$cordic.sv:40$6'.

12. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

13. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\cordic.$proc$cordic.sv:40$6'.
     1/11: $0\theta_store[16:0] [16]
     2/11: $0\theta_store[16:0] [15:0]
     3/11: $0\vec[0][16:0]
     4/11: $0\theta_iter[16:0]
     5/11: $0\vec[1][16:0]
     6/11: $0\state[1:0]
     7/11: $0\iter[4:0]
     8/11: $0\cos[15:0]
     9/11: $0\sin[15:0]
    10/11: $0\out_valid[0:0]
    11/11: $0\ready[0:0]

14. Executing PROC_DLATCH pass (convert process syncs to latches).

15. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\cordic.\ready' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$144' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\out_valid' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$145' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\sin' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$146' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\cos' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$147' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\iter' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$148' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\state' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$149' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\theta_store' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$150' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\theta_iter' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$151' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\vec[0]' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$152' with negative edge clock and negative level reset.
Creating register for signal `\cordic.\vec[1]' using process `\cordic.$proc$cordic.sv:40$6'.
  created $adff cell `$procdff$153' with negative edge clock and negative level reset.

16. Executing PROC_MEMWR pass (convert process memory writes to cells).

17. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\cordic.$proc$cordic.sv:40$6'.
Removing empty process `cordic.$proc$cordic.sv:40$6'.
Cleaned up 3 empty switches.

18. Executing CHECK pass (checking for obvious problems).
Checking module cordic...
Checking module gamma_mem...
Checking module signed_lte...
Found and reported 0 problems.

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.
<suppressed ~13 debug messages>
Optimizing module gamma_mem.
<suppressed ~1 debug messages>
Optimizing module signed_lte.

20. Executing FLATTEN pass (flatten design).
Deleting now unused module gamma_mem.
Deleting now unused module signed_lte.
<suppressed ~2 debug messages>

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 1 unused cells and 31 unused wires.
<suppressed ~2 debug messages>

23. Executing OPT pass (performing simple optimizations).

23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
<suppressed ~69 debug messages>
Removed a total of 23 cells.

23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

23.6. Executing OPT_DFF pass (perform DFF optimizations).

23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

23.9. Rerunning OPT passes. (Maybe there is more to do..)

23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

23.13. Executing OPT_DFF pass (perform DFF optimizations).

23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

23.16. Finished OPT passes. (There is nothing left to do.)

24. Executing FSM pass (extract and optimize FSM).

24.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking cordic.state as FSM state register:
    Circuit seems to be self-resetting.

24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$153 ($adff) from module cordic (D = $0\vec[1][16:0], Q = \vec[1]).
Adding EN signal on $procdff$152 ($adff) from module cordic (D = $0\vec[0][16:0], Q = \vec[0]).
Adding EN signal on $procdff$151 ($adff) from module cordic (D = $0\theta_iter[16:0], Q = \theta_iter).
Adding EN signal on $procdff$150 ($adff) from module cordic (D = $0\theta_store[16:0], Q = \theta_store).
Adding EN signal on $procdff$149 ($adff) from module cordic (D = $0\state[1:0], Q = \state).
Adding EN signal on $procdff$148 ($adff) from module cordic (D = $0\iter[4:0], Q = \iter).
Adding EN signal on $procdff$147 ($adff) from module cordic (D = $0\cos[15:0], Q = \cos).
Adding EN signal on $procdff$146 ($adff) from module cordic (D = $0\sin[15:0], Q = \sin).
Adding EN signal on $procdff$145 ($adff) from module cordic (D = $0\out_valid[0:0], Q = \out_valid).
Adding EN signal on $procdff$144 ($adff) from module cordic (D = $0\ready[0:0], Q = \ready).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.
<suppressed ~9 debug messages>

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

25.13. Executing OPT_DFF pass (perform DFF optimizations).

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 1 unused cells and 21 unused wires.
<suppressed ~2 debug messages>

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

25.16. Rerunning OPT passes. (Maybe there is more to do..)

25.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

25.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

25.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

25.20. Executing OPT_DFF pass (perform DFF optimizations).

25.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

25.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

25.23. Finished OPT passes. (There is nothing left to do.)

26. Executing WREDUCE pass (reducing word size of cells).
Removed top 16 bits (of 32) from port B of cell cordic.$mul$cordic.sv:89$9 ($mul).
Removed top 16 bits (of 32) from port B of cell cordic.$mul$cordic.sv:90$11 ($mul).
Removed top 31 bits (of 32) from port B of cell cordic.$add$cordic.sv:101$13 ($add).
Removed top 27 bits (of 32) from port Y of cell cordic.$add$cordic.sv:101$13 ($add).
Removed top 1 bits (of 2) from port B of cell cordic.$procmux$106_CMP0 ($eq).
Removed top 15 bits (of 16) from mux cell cordic.$flatten\gm0.$ternary$gamma.sv:21$43 ($mux).
Removed top 1 bits (of 4) from port B of cell cordic.$flatten\gm0.$eq$gamma.sv:13$34 ($eq).
Removed top 1 bits (of 4) from port B of cell cordic.$flatten\gm0.$eq$gamma.sv:12$33 ($eq).
Removed top 1 bits (of 4) from port B of cell cordic.$flatten\gm0.$eq$gamma.sv:11$32 ($eq).
Removed top 1 bits (of 4) from port B of cell cordic.$flatten\gm0.$eq$gamma.sv:10$31 ($eq).
Removed top 2 bits (of 4) from port B of cell cordic.$flatten\gm0.$eq$gamma.sv:9$30 ($eq).
Removed top 2 bits (of 4) from port B of cell cordic.$flatten\gm0.$eq$gamma.sv:8$29 ($eq).
Removed top 3 bits (of 4) from port B of cell cordic.$flatten\gm0.$eq$gamma.sv:7$28 ($eq).
Removed top 31 bits (of 32) from mux cell cordic.$flatten\slte0.$ternary$cordic.sv:8$5 ($mux).
Removed top 31 bits (of 32) from mux cell cordic.$flatten\slte0.$ternary$cordic.sv:10$4 ($mux).
Removed top 31 bits (of 32) from mux cell cordic.$flatten\slte0.$ternary$cordic.sv:8$2 ($mux).
Removed top 27 bits (of 32) from wire cordic.$add$cordic.sv:101$13_Y.
Removed top 15 bits (of 16) from wire cordic.$flatten\gm0.$ternary$gamma.sv:21$43_Y.
Removed top 31 bits (of 32) from wire cordic.$flatten\slte0.$ternary$cordic.sv:10$4_Y.
Removed top 31 bits (of 32) from wire cordic.$flatten\slte0.$ternary$cordic.sv:8$2_Y.

27. Executing PEEPOPT pass (run peephole optimizers).

28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

29. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module cordic:
  creating $macc model for $add$cordic.sv:101$13 ($add).
  creating $macc model for $add$cordic.sv:104$14 ($add).
  creating $macc model for $add$cordic.sv:109$20 ($add).
  creating $macc model for $add$cordic.sv:112$23 ($add).
  creating $macc model for $mul$cordic.sv:89$9 ($mul).
  creating $macc model for $mul$cordic.sv:90$11 ($mul).
  creating $macc model for $sub$cordic.sv:105$15 ($sub).
  creating $macc model for $sub$cordic.sv:108$18 ($sub).
  creating $macc model for $sub$cordic.sv:113$25 ($sub).
  creating $alu model for $macc $sub$cordic.sv:113$25.
  creating $alu model for $macc $sub$cordic.sv:108$18.
  creating $alu model for $macc $sub$cordic.sv:105$15.
  creating $alu model for $macc $add$cordic.sv:112$23.
  creating $alu model for $macc $add$cordic.sv:109$20.
  creating $alu model for $macc $add$cordic.sv:104$14.
  creating $alu model for $macc $add$cordic.sv:101$13.
  creating $macc cell for $mul$cordic.sv:90$11: $auto$alumacc.cc:365:replace_macc$212
  creating $macc cell for $mul$cordic.sv:89$9: $auto$alumacc.cc:365:replace_macc$213
  creating $alu model for $flatten\slte0.$le$cordic.sv:11$3 ($le): new $alu
  creating $alu cell for $flatten\slte0.$le$cordic.sv:11$3: $auto$alumacc.cc:485:replace_alu$215
  creating $alu cell for $add$cordic.sv:101$13: $auto$alumacc.cc:485:replace_alu$228
  creating $alu cell for $add$cordic.sv:104$14: $auto$alumacc.cc:485:replace_alu$231
  creating $alu cell for $add$cordic.sv:109$20: $auto$alumacc.cc:485:replace_alu$234
  creating $alu cell for $add$cordic.sv:112$23: $auto$alumacc.cc:485:replace_alu$237
  creating $alu cell for $sub$cordic.sv:105$15: $auto$alumacc.cc:485:replace_alu$240
  creating $alu cell for $sub$cordic.sv:108$18: $auto$alumacc.cc:485:replace_alu$243
  creating $alu cell for $sub$cordic.sv:113$25: $auto$alumacc.cc:485:replace_alu$246
  created 8 $alu and 2 $macc cells.

30. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module cordic that may be considered for resource sharing.
  Analyzing resource sharing options for $shr$cordic.sv:112$22 ($shr):
    Found 1 activation_patterns using ctrl signal { $procmux$106_CMP $eq$cordic.sv:84$8_Y }.
    Found 1 candidates: $shr$cordic.sv:108$17
    Analyzing resource sharing with $shr$cordic.sv:108$17 ($shr):
      Found 1 activation_patterns using ctrl signal { $procmux$106_CMP $eq$cordic.sv:84$8_Y }.
      Activation pattern for cell $shr$cordic.sv:112$22: { $procmux$106_CMP $eq$cordic.sv:84$8_Y } = 2'10
      Activation pattern for cell $shr$cordic.sv:108$17: { $procmux$106_CMP $eq$cordic.sv:84$8_Y } = 2'10
      Size of SAT problem: 0 cells, 38 variables, 89 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$106_CMP $eq$cordic.sv:84$8_Y } = 2'10
  Analyzing resource sharing options for $shr$cordic.sv:108$17 ($shr):
    Found 1 activation_patterns using ctrl signal { $procmux$106_CMP $eq$cordic.sv:84$8_Y }.
    No candidates found.

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

31.9. Rerunning OPT passes. (Maybe there is more to do..)

31.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

31.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

31.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

31.13. Executing OPT_DFF pass (perform DFF optimizations).

31.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

31.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

31.16. Finished OPT passes. (There is nothing left to do.)

32. Executing MEMORY pass.

32.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

32.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

32.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

32.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

32.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

32.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

32.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

32.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

32.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

32.10. Executing MEMORY_COLLECT pass (generating $mem cells).

33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.
<suppressed ~16 debug messages>

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

34.3. Executing OPT_DFF pass (perform DFF optimizations).

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

34.5. Finished fast OPT passes.

35. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
    Consolidated identical input bits for $mux cell $flatten\gm0.$ternary$gamma.sv:20$44:
      Old ports: A={ 15'000000000000000 $auto$wreduce.cc:461:run$209 [0] }, B=16'0000000000000010, Y=$flatten\gm0.$ternary$gamma.sv:20$44_Y
      New ports: A={ 1'0 $auto$wreduce.cc:461:run$209 [0] }, B=2'10, Y=$flatten\gm0.$ternary$gamma.sv:20$44_Y [1:0]
      New connections: $flatten\gm0.$ternary$gamma.sv:20$44_Y [15:2] = 14'00000000000000
    New ctrl vector for $pmux cell $procmux$112: $procmux$106_CMP
    New ctrl vector for $pmux cell $procmux$121: $procmux$106_CMP
    New ctrl vector for $pmux cell $procmux$130: $procmux$106_CMP
    New ctrl vector for $pmux cell $procmux$139: $procmux$100_CMP
    Consolidated identical input bits for $pmux cell $procmux$96:
      Old ports: A=2'00, B=4'0100, Y=$0\state[1:0]
      New ports: A=1'0, B=2'10, Y=$0\state[1:0] [0]
      New connections: $0\state[1:0] [1] = 1'0
    New ctrl vector for $pmux cell $procmux$96: $procmux$100_CMP
  Optimizing cells in module \cordic.
    Consolidated identical input bits for $mux cell $flatten\gm0.$ternary$gamma.sv:19$45:
      Old ports: A=$flatten\gm0.$ternary$gamma.sv:20$44_Y, B=16'0000000000000101, Y=$flatten\gm0.$ternary$gamma.sv:19$45_Y
      New ports: A={ 1'0 $flatten\gm0.$ternary$gamma.sv:20$44_Y [1:0] }, B=3'101, Y=$flatten\gm0.$ternary$gamma.sv:19$45_Y [2:0]
      New connections: $flatten\gm0.$ternary$gamma.sv:19$45_Y [15:3] = 13'0000000000000
  Optimizing cells in module \cordic.
    Consolidated identical input bits for $mux cell $flatten\gm0.$ternary$gamma.sv:18$46:
      Old ports: A=$flatten\gm0.$ternary$gamma.sv:19$45_Y, B=16'0000000000001010, Y=$flatten\gm0.$ternary$gamma.sv:18$46_Y
      New ports: A={ 1'0 $flatten\gm0.$ternary$gamma.sv:19$45_Y [2:0] }, B=4'1010, Y=$flatten\gm0.$ternary$gamma.sv:18$46_Y [3:0]
      New connections: $flatten\gm0.$ternary$gamma.sv:18$46_Y [15:4] = 12'000000000000
  Optimizing cells in module \cordic.
    Consolidated identical input bits for $mux cell $flatten\gm0.$ternary$gamma.sv:17$47:
      Old ports: A=$flatten\gm0.$ternary$gamma.sv:18$46_Y, B=16'0000000000010100, Y=$flatten\gm0.$ternary$gamma.sv:17$47_Y
      New ports: A={ 1'0 $flatten\gm0.$ternary$gamma.sv:18$46_Y [3:0] }, B=5'10100, Y=$flatten\gm0.$ternary$gamma.sv:17$47_Y [4:0]
      New connections: $flatten\gm0.$ternary$gamma.sv:17$47_Y [15:5] = 11'00000000000
  Optimizing cells in module \cordic.
    Consolidated identical input bits for $mux cell $flatten\gm0.$ternary$gamma.sv:16$48:
      Old ports: A=$flatten\gm0.$ternary$gamma.sv:17$47_Y, B=16'0000000000101000, Y=$flatten\gm0.$ternary$gamma.sv:16$48_Y
      New ports: A={ 1'0 $flatten\gm0.$ternary$gamma.sv:17$47_Y [4:0] }, B=6'101000, Y=$flatten\gm0.$ternary$gamma.sv:16$48_Y [5:0]
      New connections: $flatten\gm0.$ternary$gamma.sv:16$48_Y [15:6] = 10'0000000000
  Optimizing cells in module \cordic.
    Consolidated identical input bits for $mux cell $flatten\gm0.$ternary$gamma.sv:15$49:
      Old ports: A=$flatten\gm0.$ternary$gamma.sv:16$48_Y, B=16'0000000001010001, Y=$flatten\gm0.$ternary$gamma.sv:15$49_Y
      New ports: A={ 1'0 $flatten\gm0.$ternary$gamma.sv:16$48_Y [5:0] }, B=7'1010001, Y=$flatten\gm0.$ternary$gamma.sv:15$49_Y [6:0]
      New connections: $flatten\gm0.$ternary$gamma.sv:15$49_Y [15:7] = 9'000000000
  Optimizing cells in module \cordic.
    Consolidated identical input bits for $mux cell $flatten\gm0.$ternary$gamma.sv:14$50:
      Old ports: A=$flatten\gm0.$ternary$gamma.sv:15$49_Y, B=16'0000000010100010, Y=$flatten\gm0.$ternary$gamma.sv:14$50_Y
      New ports: A={ 1'0 $flatten\gm0.$ternary$gamma.sv:15$49_Y [6:0] }, B=8'10100010, Y=$flatten\gm0.$ternary$gamma.sv:14$50_Y [7:0]
      New connections: $flatten\gm0.$ternary$gamma.sv:14$50_Y [15:8] = 8'00000000
  Optimizing cells in module \cordic.
    Consolidated identical input bits for $mux cell $flatten\gm0.$ternary$gamma.sv:13$51:
      Old ports: A=$flatten\gm0.$ternary$gamma.sv:14$50_Y, B=16'0000000101000101, Y=$flatten\gm0.$ternary$gamma.sv:13$51_Y
      New ports: A={ 1'0 $flatten\gm0.$ternary$gamma.sv:14$50_Y [7:0] }, B=9'101000101, Y=$flatten\gm0.$ternary$gamma.sv:13$51_Y [8:0]
      New connections: $flatten\gm0.$ternary$gamma.sv:13$51_Y [15:9] = 7'0000000
  Optimizing cells in module \cordic.
    Consolidated identical input bits for $mux cell $flatten\gm0.$ternary$gamma.sv:12$52:
      Old ports: A=$flatten\gm0.$ternary$gamma.sv:13$51_Y, B=16'0000001010001011, Y=$flatten\gm0.$ternary$gamma.sv:12$52_Y
      New ports: A={ 1'0 $flatten\gm0.$ternary$gamma.sv:13$51_Y [8:0] }, B=10'1010001011, Y=$flatten\gm0.$ternary$gamma.sv:12$52_Y [9:0]
      New connections: $flatten\gm0.$ternary$gamma.sv:12$52_Y [15:10] = 6'000000
  Optimizing cells in module \cordic.
    Consolidated identical input bits for $mux cell $flatten\gm0.$ternary$gamma.sv:11$53:
      Old ports: A=$flatten\gm0.$ternary$gamma.sv:12$52_Y, B=16'0000010100010111, Y=$flatten\gm0.$ternary$gamma.sv:11$53_Y
      New ports: A={ 1'0 $flatten\gm0.$ternary$gamma.sv:12$52_Y [9:0] }, B=11'10100010111, Y=$flatten\gm0.$ternary$gamma.sv:11$53_Y [10:0]
      New connections: $flatten\gm0.$ternary$gamma.sv:11$53_Y [15:11] = 5'00000
  Optimizing cells in module \cordic.
    Consolidated identical input bits for $mux cell $flatten\gm0.$ternary$gamma.sv:10$54:
      Old ports: A=$flatten\gm0.$ternary$gamma.sv:11$53_Y, B=16'0000101000101100, Y=$flatten\gm0.$ternary$gamma.sv:10$54_Y
      New ports: A={ 1'0 $flatten\gm0.$ternary$gamma.sv:11$53_Y [10:0] }, B=12'101000101100, Y=$flatten\gm0.$ternary$gamma.sv:10$54_Y [11:0]
      New connections: $flatten\gm0.$ternary$gamma.sv:10$54_Y [15:12] = 4'0000
  Optimizing cells in module \cordic.
    Consolidated identical input bits for $mux cell $flatten\gm0.$ternary$gamma.sv:9$55:
      Old ports: A=$flatten\gm0.$ternary$gamma.sv:10$54_Y, B=16'0001010001000100, Y=$flatten\gm0.$ternary$gamma.sv:9$55_Y
      New ports: A={ 1'0 $flatten\gm0.$ternary$gamma.sv:10$54_Y [11:0] }, B=13'1010001000100, Y=$flatten\gm0.$ternary$gamma.sv:9$55_Y [12:0]
      New connections: $flatten\gm0.$ternary$gamma.sv:9$55_Y [15:13] = 3'000
  Optimizing cells in module \cordic.
    Consolidated identical input bits for $mux cell $flatten\gm0.$ternary$gamma.sv:8$56:
      Old ports: A=$flatten\gm0.$ternary$gamma.sv:9$55_Y, B=16'0010011111101101, Y=$flatten\gm0.$ternary$gamma.sv:8$56_Y
      New ports: A={ 1'0 $flatten\gm0.$ternary$gamma.sv:9$55_Y [12:0] }, B=14'10011111101101, Y=$flatten\gm0.$ternary$gamma.sv:8$56_Y [13:0]
      New connections: $flatten\gm0.$ternary$gamma.sv:8$56_Y [15:14] = 2'00
  Optimizing cells in module \cordic.
    Consolidated identical input bits for $mux cell $flatten\gm0.$ternary$gamma.sv:7$57:
      Old ports: A=$flatten\gm0.$ternary$gamma.sv:8$56_Y, B=16'0100101110010000, Y=$flatten\gm0.$ternary$gamma.sv:7$57_Y
      New ports: A={ 1'0 $flatten\gm0.$ternary$gamma.sv:8$56_Y [13:0] }, B=15'100101110010000, Y=$flatten\gm0.$ternary$gamma.sv:7$57_Y [14:0]
      New connections: $flatten\gm0.$ternary$gamma.sv:7$57_Y [15] = 1'0
  Optimizing cells in module \cordic.
Performed a total of 20 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

36.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $ternary$cordic.sv:103$16 in front of them:
        $auto$alumacc.cc:485:replace_alu$231
        $auto$alumacc.cc:485:replace_alu$240

    Found cells that share an operand and can be merged by moving the $mux $ternary$cordic.sv:107$21 in front of them:
        $auto$alumacc.cc:485:replace_alu$243
        $auto$alumacc.cc:485:replace_alu$234

    Found cells that share an operand and can be merged by moving the $mux $ternary$cordic.sv:111$26 in front of them:
        $auto$alumacc.cc:485:replace_alu$237
        $auto$alumacc.cc:485:replace_alu$246

36.7. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 16 on $auto$ff.cc:266:slice$163 ($adffe) from module cordic.

36.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 0 unused cells and 18 unused wires.
<suppressed ~1 debug messages>

36.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.
<suppressed ~8 debug messages>

36.10. Rerunning OPT passes. (Maybe there is more to do..)

36.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

36.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

36.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

36.14. Executing OPT_SHARE pass.

36.15. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$170 ($adffe) from module cordic.

36.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

36.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.
<suppressed ~9 debug messages>

36.18. Rerunning OPT passes. (Maybe there is more to do..)

36.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

36.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

36.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

36.22. Executing OPT_SHARE pass.

36.23. Executing OPT_DFF pass (perform DFF optimizations).

36.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

36.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

36.26. Rerunning OPT passes. (Maybe there is more to do..)

36.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

36.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

36.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

36.30. Executing OPT_SHARE pass.

36.31. Executing OPT_DFF pass (perform DFF optimizations).

36.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

36.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

36.34. Finished OPT passes. (There is nothing left to do.)

37. Executing TECHMAP pass (map to technology primitives).

37.1. Executing Verilog-2005 frontend: /home/ece393/oss-cad-suite-20231016/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/ece393/oss-cad-suite-20231016/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

37.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper maccmap for cells of type $macc.
  add \vec[0] * 16'1001101101110101 (17x16 bits, unsigned)
Using template $paramod$3bb72ad0665cdca279bbc49ed6a39f403f16497f\_90_alu for cells of type $alu.
Using template $paramod$constmap:2b16090b8b76a887c2da2dca8b0085212c933460$paramod$90ab5c8ed224639405475e89ab8bb58cf256c3ff\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=17:Y_WIDTH=17:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=17:Y_WIDTH=17:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=17:Y_WIDTH=17:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $adffe.
  add \vec[1] * 16'1001101101110101 (17x16 bits, unsigned)
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000100000 for cells of type $fa.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod$dcb69476c4ea50ae33010ee411a8318aa586292f\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
No more expansions possible.
<suppressed ~1986 debug messages>

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.
<suppressed ~4767 debug messages>

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
<suppressed ~897 debug messages>
Removed a total of 299 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 200 unused cells and 965 unused wires.
<suppressed ~201 debug messages>

38.5. Finished fast OPT passes.

39. Executing ABC pass (technology mapping using ABC).

39.1. Extracting gate netlist of module `\cordic' to `<abc-temp-dir>/input.blif'..
Extracted 2899 gates and 2991 wires to a netlist network with 90 inputs and 107 outputs.

39.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

39.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      157
ABC RESULTS:              NAND cells:       36
ABC RESULTS:               AND cells:       75
ABC RESULTS:              XNOR cells:      286
ABC RESULTS:               NOR cells:      192
ABC RESULTS:                OR cells:      395
ABC RESULTS:             ORNOT cells:      140
ABC RESULTS:               NOT cells:      194
ABC RESULTS:               XOR cells:      536
ABC RESULTS:            ANDNOT cells:      963
ABC RESULTS:        internal signals:     2794
ABC RESULTS:           input signals:       90
ABC RESULTS:          output signals:      107
Removing temp directory.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.
<suppressed ~77 debug messages>

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 2 unused cells and 759 unused wires.
<suppressed ~3 debug messages>

40.5. Finished fast OPT passes.

41. Executing HIERARCHY pass (managing design hierarchy).

41.1. Analyzing design hierarchy..
Top module:  \cordic

41.2. Analyzing design hierarchy..
Top module:  \cordic
Removed 0 unused modules.

42. Printing statistics.

=== cordic ===

   Number of wires:               2894
   Number of wire bits:           3173
   Number of public wires:          21
   Number of public wire bits:     201
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3077
     $_ANDNOT_                     963
     $_AND_                         73
     $_DFFE_NN0P_                   90
     $_DFFE_NN1P_                   17
     $_MUX_                        157
     $_NAND_                        36
     $_NOR_                        192
     $_NOT_                        192
     $_ORNOT_                      140
     $_OR_                         395
     $_XNOR_                       286
     $_XOR_                        536

43. Executing CHECK pass (checking for obvious problems).
Checking module cordic...
Found and reported 0 problems.

44. Generating Graphviz representation of design.
Writing dot description to `/home/jco1147/393_folder/CE493/sv/cordic/runs/RUN_2023-11-15_10-07-41/05-yosys-synthesis/post_techmap.dot'.
Dumping module cordic to page 1.

45. Executing SHARE pass (SAT-based resource sharing).

46. Executing OPT pass (performing simple optimizations).

46.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

46.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

46.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

46.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

46.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

46.6. Executing OPT_DFF pass (perform DFF optimizations).

46.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

46.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

46.9. Finished OPT passes. (There is nothing left to do.)

47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 0 unused cells and 7 unused wires.
<suppressed ~7 debug messages>
{
   "creator": "Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\cordic": {
         "num_wires":         2887,
         "num_wire_bits":     3100,
         "num_pub_wires":     14,
         "num_pub_wire_bits": 128,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         3077,
         "num_cells_by_type": {
            "$_ANDNOT_": 963,
            "$_AND_": 73,
            "$_DFFE_NN0P_": 90,
            "$_DFFE_NN1P_": 17,
            "$_MUX_": 157,
            "$_NAND_": 36,
            "$_NOR_": 192,
            "$_NOT_": 192,
            "$_ORNOT_": 140,
            "$_OR_": 395,
            "$_XNOR_": 286,
            "$_XOR_": 536
         }
      }
   },
      "design": {
         "num_wires":         2887,
         "num_wire_bits":     3100,
         "num_pub_wires":     14,
         "num_pub_wire_bits": 128,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         3077,
         "num_cells_by_type": {
            "$_ANDNOT_": 963,
            "$_AND_": 73,
            "$_DFFE_NN0P_": 90,
            "$_DFFE_NN1P_": 17,
            "$_MUX_": 157,
            "$_NAND_": 36,
            "$_NOR_": 192,
            "$_NOT_": 192,
            "$_ORNOT_": 140,
            "$_OR_": 395,
            "$_XNOR_": 286,
            "$_XOR_": 536
         }
      }
}

[INFO] Applying latch mapping from '/home/jco1147/393_folder/openlane/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â¦

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /home/jco1147/393_folder/openlane/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/jco1147/393_folder/openlane/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

50.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\cordic':
  mapped 90 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 17 $_DFF_PN1_ cells to \sky130_fd_sc_hd__dfstp_2 cells.
{
   "creator": "Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\cordic": {
         "num_wires":         3101,
         "num_wire_bits":     3314,
         "num_pub_wires":     14,
         "num_pub_wire_bits": 128,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         3291,
         "num_cells_by_type": {
            "$_ANDNOT_": 963,
            "$_AND_": 73,
            "$_MUX_": 264,
            "$_NAND_": 36,
            "$_NOR_": 192,
            "$_NOT_": 299,
            "$_ORNOT_": 140,
            "$_OR_": 395,
            "$_XNOR_": 286,
            "$_XOR_": 536,
            "sky130_fd_sc_hd__dfrtp_2": 90,
            "sky130_fd_sc_hd__dfstp_2": 17
         }
      }
   },
      "design": {
         "num_wires":         3101,
         "num_wire_bits":     3314,
         "num_pub_wires":     14,
         "num_pub_wire_bits": 128,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         3291,
         "num_cells_by_type": {
            "$_ANDNOT_": 963,
            "$_AND_": 73,
            "$_MUX_": 264,
            "$_NAND_": 36,
            "$_NOR_": 192,
            "$_NOT_": 299,
            "$_ORNOT_": 140,
            "$_OR_": 395,
            "$_XNOR_": 286,
            "$_XOR_": 536,
            "sky130_fd_sc_hd__dfrtp_2": 90,
            "sky130_fd_sc_hd__dfstp_2": 17
         }
      }
}

[INFO] USING STRATEGY AREA 0

51. Executing ABC pass (technology mapping using ABC).

51.1. Extracting gate netlist of module `\cordic' to `/tmp/yosys-abc-kLRgYx/input.blif'..
Extracted 3184 gates and 3309 wires to a netlist network with 125 inputs and 214 outputs.

51.1.1. Executing ABC.
Running ABC command: "/home/ece393/oss-cad-suite-20231016/lib/yosys-abc" -s -f /tmp/yosys-abc-kLRgYx/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-kLRgYx/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-kLRgYx/input.blif 
ABC: + read_lib -w /home/jco1147/393_folder/CE493/sv/cordic/runs/RUN_2023-11-15_10-07-41/tmp/529de1d863a04451ae222fac31db2d19.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/jco1147/393_folder/CE493/sv/cordic/runs/RUN_2023-11-15_10-07-41/tmp/529de1d863a04451ae222fac31db2d19.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.07 sec
ABC: Memory =    9.54 MB. Time =     0.07 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/jco1147/393_folder/CE493/sv/cordic/runs/RUN_2023-11-15_10-07-41/05-yosys-synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /home/jco1147/393_folder/CE493/sv/cordic/runs/RUN_2023-11-15_10-07-41/05-yosys-synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + upsize -D 10000 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: Current delay (5680.85 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + stime -p 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =   2347 (  9.8 %)   Cap = 11.8 ff (  2.2 %)   Area =    22297.63 ( 88.8 %)   Delay =  5688.16 ps  (  6.3 %)               
ABC: Path  0 --       5 : 0   27 pi                        A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout = 114.3 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    1874 : 2    5 sky130_fd_sc_hd__xor2_2   A =  16.27  Df = 322.7 -118.1 ps  S = 375.9 ps  Cin =  8.6 ff  Cout =  28.5 ff  Cmax = 130.0 ff  G =  318  
ABC: Path  2 --    1913 : 2    3 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df = 625.3 -118.3 ps  S = 287.6 ps  Cin =  8.5 ff  Cout =  19.0 ff  Cmax = 121.8 ff  G =  215  
ABC: Path  3 --    2186 : 2    2 sky130_fd_sc_hd__xor2_2   A =  16.27  Df = 840.6  -43.0 ps  S = 185.2 ps  Cin =  8.6 ff  Cout =  10.7 ff  Cmax = 130.0 ff  G =  120  
ABC: Path  4 --    2191 : 2    2 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =1073.8  -54.7 ps  S = 223.7 ps  Cin =  8.5 ff  Cout =  13.5 ff  Cmax = 121.8 ff  G =  154  
ABC: Path  5 --    2222 : 2    2 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =1287.9  -78.3 ps  S = 190.4 ps  Cin =  8.5 ff  Cout =  10.6 ff  Cmax = 121.8 ff  G =  120  
ABC: Path  6 --    2234 : 2    2 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =1505.6  -84.0 ps  S = 195.6 ps  Cin =  8.5 ff  Cout =  11.1 ff  Cmax = 121.8 ff  G =  124  
ABC: Path  7 --    2257 : 2    2 sky130_fd_sc_hd__xor2_2   A =  16.27  Df =1734.7 -144.9 ps  S = 182.0 ps  Cin =  8.6 ff  Cout =  10.7 ff  Cmax = 130.0 ff  G =  120  
ABC: Path  8 --    2274 : 2    2 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =1951.8  -38.1 ps  S = 223.7 ps  Cin =  8.5 ff  Cout =  13.5 ff  Cmax = 121.8 ff  G =  154  
ABC: Path  9 --    2279 : 2    2 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =2145.3  -16.4 ps  S = 194.8 ps  Cin =  8.5 ff  Cout =  11.0 ff  Cmax = 121.8 ff  G =  124  
ABC: Path 10 --    2307 : 2    3 sky130_fd_sc_hd__and2b_2  A =   8.76  Df =2409.7   -2.6 ps  S =  72.5 ps  Cin =  1.6 ff  Cout =  11.0 ff  Cmax = 310.4 ff  G =  667  
ABC: Path 11 --    2310 : 4    1 sky130_fd_sc_hd__a2bb2o_2 A =  11.26  Df =2692.3  -32.3 ps  S =  41.2 ps  Cin =  1.7 ff  Cout =   2.5 ff  Cmax = 300.3 ff  G =  135  
ABC: Path 12 --    2311 : 4    2 sky130_fd_sc_hd__a211o_2  A =  10.01  Df =2922.7 -143.5 ps  S =  50.9 ps  Cin =  2.4 ff  Cout =   4.1 ff  Cmax = 325.0 ff  G =  165  
ABC: Path 13 --    2415 : 3    2 sky130_fd_sc_hd__or3_2    A =   7.51  Df =3396.0 -513.8 ps  S =  80.9 ps  Cin =  1.5 ff  Cout =   4.0 ff  Cmax = 310.4 ff  G =  257  
ABC: Path 14 --    2422 : 5    1 sky130_fd_sc_hd__a2111o_2 A =  12.51  Df =3811.8 -663.4 ps  S =  58.7 ps  Cin =  2.4 ff  Cout =   2.5 ff  Cmax = 324.1 ff  G =   98  
ABC: Path 15 --    2476 : 4    4 sky130_fd_sc_hd__a31o_2   A =   8.76  Df =4090.2 -428.2 ps  S =  96.7 ps  Cin =  2.4 ff  Cout =  14.0 ff  Cmax = 271.9 ff  G =  577  
ABC: Path 16 --    2500 : 5    3 sky130_fd_sc_hd__a2111o_2 A =  12.51  Df =4535.4 -709.2 ps  S =  82.9 ps  Cin =  2.4 ff  Cout =  10.1 ff  Cmax = 324.1 ff  G =  395  
ABC: Path 17 --    2514 : 4    2 sky130_fd_sc_hd__a211o_2  A =  10.01  Df =4888.5 -924.4 ps  S =  59.6 ps  Cin =  2.4 ff  Cout =   7.0 ff  Cmax = 325.0 ff  G =  290  
ABC: Path 18 --    2518 : 3    2 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =5084.9-1001.4 ps  S =  44.3 ps  Cin =  2.4 ff  Cout =   5.8 ff  Cmax = 309.5 ff  G =  236  
ABC: Path 19 --    2519 : 3    1 sky130_fd_sc_hd__mux2_2   A =  11.26  Df =5398.9-1104.7 ps  S =  46.2 ps  Cin =  2.3 ff  Cout =   2.5 ff  Cmax = 297.6 ff  G =  104  
ABC: Path 20 --    2520 : 4    1 sky130_fd_sc_hd__a22o_2   A =  10.01  Df =5688.2-1165.2 ps  S = 179.8 ps  Cin =  2.3 ff  Cout =  33.4 ff  Cmax = 301.2 ff  G = 1424  
ABC: Start-point = pi4 (\vec[1] [13]).  End-point = po88 ($auto$rtlil.cc:2669:MuxGate$12260).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  125/  214  lat =    0  nd =  2347  edge =   5707  area =22302.35  delay =21.00  lev = 21
ABC: + write_blif /tmp/yosys-abc-kLRgYx/output.blif 

51.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o32ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a311oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o311ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2bb2oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       48
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       53
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       48
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       95
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:      297
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:       48
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:       40
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:      143
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:      163
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       87
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       41
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:      126
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:      213
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       45
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:      126
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       38
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:       36
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       58
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      206
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:      182
ABC RESULTS:        internal signals:     2970
ABC RESULTS:           input signals:      125
ABC RESULTS:          output signals:      214
Removing temp directory.

52. Executing SETUNDEF pass (replace undef values with defined constants).

53. Executing HILOMAP pass (mapping to constant drivers).
Warning: Selection "sky130_fd_sc_hd__conb_1" did not match any module.
Warning: Selection "LO" did not match any object.

54. Executing SPLITNETS pass (splitting up multi-bit signals).

55. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 0 unused cells and 3313 unused wires.
<suppressed ~3 debug messages>

56. Executing INSBUF pass (insert buffer cells for connected wires).

57. Executing CHECK pass (checking for obvious problems).
Checking module cordic...
Found and reported 0 problems.
{
   "creator": "Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\cordic": {
         "num_wires":         2428,
         "num_wire_bits":     2473,
         "num_pub_wires":     81,
         "num_pub_wire_bits": 126,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         2454,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111o_2": 4,
            "sky130_fd_sc_hd__a211o_2": 13,
            "sky130_fd_sc_hd__a211oi_2": 3,
            "sky130_fd_sc_hd__a21bo_2": 20,
            "sky130_fd_sc_hd__a21boi_2": 11,
            "sky130_fd_sc_hd__a21o_2": 58,
            "sky130_fd_sc_hd__a21oi_2": 126,
            "sky130_fd_sc_hd__a221o_2": 3,
            "sky130_fd_sc_hd__a22o_2": 45,
            "sky130_fd_sc_hd__a2bb2o_2": 10,
            "sky130_fd_sc_hd__a2bb2oi_2": 1,
            "sky130_fd_sc_hd__a311o_2": 5,
            "sky130_fd_sc_hd__a311oi_2": 1,
            "sky130_fd_sc_hd__a31o_2": 38,
            "sky130_fd_sc_hd__a31oi_2": 2,
            "sky130_fd_sc_hd__a32o_2": 36,
            "sky130_fd_sc_hd__a41o_2": 1,
            "sky130_fd_sc_hd__and2_2": 126,
            "sky130_fd_sc_hd__and2b_2": 95,
            "sky130_fd_sc_hd__and3_2": 53,
            "sky130_fd_sc_hd__and3b_2": 6,
            "sky130_fd_sc_hd__and4_2": 3,
            "sky130_fd_sc_hd__and4b_2": 2,
            "sky130_fd_sc_hd__and4bb_2": 3,
            "sky130_fd_sc_hd__buf_1": 48,
            "sky130_fd_sc_hd__dfrtp_2": 90,
            "sky130_fd_sc_hd__dfstp_2": 17,
            "sky130_fd_sc_hd__inv_2": 182,
            "sky130_fd_sc_hd__mux2_2": 48,
            "sky130_fd_sc_hd__mux4_2": 30,
            "sky130_fd_sc_hd__nand2_2": 206,
            "sky130_fd_sc_hd__nand2b_2": 1,
            "sky130_fd_sc_hd__nand3_2": 9,
            "sky130_fd_sc_hd__nand3b_2": 3,
            "sky130_fd_sc_hd__nand4_2": 1,
            "sky130_fd_sc_hd__nand4b_2": 1,
            "sky130_fd_sc_hd__nor2_2": 213,
            "sky130_fd_sc_hd__nor2b_2": 1,
            "sky130_fd_sc_hd__nor3_2": 14,
            "sky130_fd_sc_hd__o2111a_2": 3,
            "sky130_fd_sc_hd__o211a_2": 15,
            "sky130_fd_sc_hd__o211ai_2": 2,
            "sky130_fd_sc_hd__o21a_2": 48,
            "sky130_fd_sc_hd__o21ai_2": 87,
            "sky130_fd_sc_hd__o21ba_2": 10,
            "sky130_fd_sc_hd__o21bai_2": 7,
            "sky130_fd_sc_hd__o221a_2": 7,
            "sky130_fd_sc_hd__o22a_2": 17,
            "sky130_fd_sc_hd__o22ai_2": 5,
            "sky130_fd_sc_hd__o2bb2a_2": 7,
            "sky130_fd_sc_hd__o311a_2": 4,
            "sky130_fd_sc_hd__o311ai_2": 2,
            "sky130_fd_sc_hd__o31a_2": 9,
            "sky130_fd_sc_hd__o31ai_2": 3,
            "sky130_fd_sc_hd__o32a_2": 3,
            "sky130_fd_sc_hd__o32ai_2": 1,
            "sky130_fd_sc_hd__or2_2": 143,
            "sky130_fd_sc_hd__or2b_2": 40,
            "sky130_fd_sc_hd__or3_2": 41,
            "sky130_fd_sc_hd__or3b_2": 10,
            "sky130_fd_sc_hd__or4_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 297,
            "sky130_fd_sc_hd__xor2_2": 163
         }
      }
   },
      "design": {
         "num_wires":         2428,
         "num_wire_bits":     2473,
         "num_pub_wires":     81,
         "num_pub_wire_bits": 126,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         2454,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111o_2": 4,
            "sky130_fd_sc_hd__a211o_2": 13,
            "sky130_fd_sc_hd__a211oi_2": 3,
            "sky130_fd_sc_hd__a21bo_2": 20,
            "sky130_fd_sc_hd__a21boi_2": 11,
            "sky130_fd_sc_hd__a21o_2": 58,
            "sky130_fd_sc_hd__a21oi_2": 126,
            "sky130_fd_sc_hd__a221o_2": 3,
            "sky130_fd_sc_hd__a22o_2": 45,
            "sky130_fd_sc_hd__a2bb2o_2": 10,
            "sky130_fd_sc_hd__a2bb2oi_2": 1,
            "sky130_fd_sc_hd__a311o_2": 5,
            "sky130_fd_sc_hd__a311oi_2": 1,
            "sky130_fd_sc_hd__a31o_2": 38,
            "sky130_fd_sc_hd__a31oi_2": 2,
            "sky130_fd_sc_hd__a32o_2": 36,
            "sky130_fd_sc_hd__a41o_2": 1,
            "sky130_fd_sc_hd__and2_2": 126,
            "sky130_fd_sc_hd__and2b_2": 95,
            "sky130_fd_sc_hd__and3_2": 53,
            "sky130_fd_sc_hd__and3b_2": 6,
            "sky130_fd_sc_hd__and4_2": 3,
            "sky130_fd_sc_hd__and4b_2": 2,
            "sky130_fd_sc_hd__and4bb_2": 3,
            "sky130_fd_sc_hd__buf_1": 48,
            "sky130_fd_sc_hd__dfrtp_2": 90,
            "sky130_fd_sc_hd__dfstp_2": 17,
            "sky130_fd_sc_hd__inv_2": 182,
            "sky130_fd_sc_hd__mux2_2": 48,
            "sky130_fd_sc_hd__mux4_2": 30,
            "sky130_fd_sc_hd__nand2_2": 206,
            "sky130_fd_sc_hd__nand2b_2": 1,
            "sky130_fd_sc_hd__nand3_2": 9,
            "sky130_fd_sc_hd__nand3b_2": 3,
            "sky130_fd_sc_hd__nand4_2": 1,
            "sky130_fd_sc_hd__nand4b_2": 1,
            "sky130_fd_sc_hd__nor2_2": 213,
            "sky130_fd_sc_hd__nor2b_2": 1,
            "sky130_fd_sc_hd__nor3_2": 14,
            "sky130_fd_sc_hd__o2111a_2": 3,
            "sky130_fd_sc_hd__o211a_2": 15,
            "sky130_fd_sc_hd__o211ai_2": 2,
            "sky130_fd_sc_hd__o21a_2": 48,
            "sky130_fd_sc_hd__o21ai_2": 87,
            "sky130_fd_sc_hd__o21ba_2": 10,
            "sky130_fd_sc_hd__o21bai_2": 7,
            "sky130_fd_sc_hd__o221a_2": 7,
            "sky130_fd_sc_hd__o22a_2": 17,
            "sky130_fd_sc_hd__o22ai_2": 5,
            "sky130_fd_sc_hd__o2bb2a_2": 7,
            "sky130_fd_sc_hd__o311a_2": 4,
            "sky130_fd_sc_hd__o311ai_2": 2,
            "sky130_fd_sc_hd__o31a_2": 9,
            "sky130_fd_sc_hd__o31ai_2": 3,
            "sky130_fd_sc_hd__o32a_2": 3,
            "sky130_fd_sc_hd__o32ai_2": 1,
            "sky130_fd_sc_hd__or2_2": 143,
            "sky130_fd_sc_hd__or2b_2": 40,
            "sky130_fd_sc_hd__or3_2": 41,
            "sky130_fd_sc_hd__or3b_2": 10,
            "sky130_fd_sc_hd__or4_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 297,
            "sky130_fd_sc_hd__xor2_2": 163
         }
      }
}

58. Executing Verilog backend.
Dumping module `\cordic'.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: c4de44486b, CPU: user 1.11s system 0.02s, MEM: 44.46 MB peak
Yosys 0.34+27 (git sha1 7d30f716e, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 82% 2x abc (5 sec), 4% 30x opt_expr (0 sec), ...
